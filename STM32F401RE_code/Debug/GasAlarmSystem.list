
GasAlarmSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002354  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080024f4  080024f4  000034f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025e4  080025e4  00004060  2**0
                  CONTENTS
  4 .ARM          00000008  080025e4  080025e4  000035e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025ec  080025ec  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025ec  080025ec  000035ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025f0  080025f0  000035f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080025f4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000060  08002654  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08002654  0000425c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000328b  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000101a  00000000  00000000  0000731b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000348  00000000  00000000  00008338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000236  00000000  00000000  00008680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f72  00000000  00000000  000088b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006cad  00000000  00000000  0001e828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000843ab  00000000  00000000  000254d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9880  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001048  00000000  00000000  000a98c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000aa90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080024dc 	.word	0x080024dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080024dc 	.word	0x080024dc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	@ (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	@ (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <Button_Init>:
volatile uint32_t last_sw1_time = 0;
volatile uint32_t last_sw2_time = 0;

extern volatile uint32_t msTicks; // phải có biến này trong delay.c hoặc main.c

void Button_Init(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
    // Enable clock for GPIOB
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <Button_Init+0xcc>)
 8000316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <Button_Init+0xcc>)
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	6313      	str	r3, [r2, #48]	@ 0x30

    // PB3, PB4 input mode, pull-up
    GPIOB->MODER &= ~(3 << (3 * 2)); // PB3 input
 8000320:	4b2f      	ldr	r3, [pc, #188]	@ (80003e0 <Button_Init+0xd0>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a2e      	ldr	r2, [pc, #184]	@ (80003e0 <Button_Init+0xd0>)
 8000326:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800032a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(3 << (4 * 2)); // PB4 input
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <Button_Init+0xd0>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a2b      	ldr	r2, [pc, #172]	@ (80003e0 <Button_Init+0xd0>)
 8000332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000336:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(3 << (3 * 2));
 8000338:	4b29      	ldr	r3, [pc, #164]	@ (80003e0 <Button_Init+0xd0>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	4a28      	ldr	r2, [pc, #160]	@ (80003e0 <Button_Init+0xd0>)
 800033e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000342:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << (3 * 2));  // PB3 pull-up
 8000344:	4b26      	ldr	r3, [pc, #152]	@ (80003e0 <Button_Init+0xd0>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a25      	ldr	r2, [pc, #148]	@ (80003e0 <Button_Init+0xd0>)
 800034a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800034e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR &= ~(3 << (4 * 2));
 8000350:	4b23      	ldr	r3, [pc, #140]	@ (80003e0 <Button_Init+0xd0>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4a22      	ldr	r2, [pc, #136]	@ (80003e0 <Button_Init+0xd0>)
 8000356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800035a:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << (4 * 2));  // PB4 pull-up
 800035c:	4b20      	ldr	r3, [pc, #128]	@ (80003e0 <Button_Init+0xd0>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	4a1f      	ldr	r2, [pc, #124]	@ (80003e0 <Button_Init+0xd0>)
 8000362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000366:	60d3      	str	r3, [r2, #12]

    // Enable SYSCFG clock
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000368:	4b1c      	ldr	r3, [pc, #112]	@ (80003dc <Button_Init+0xcc>)
 800036a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800036c:	4a1b      	ldr	r2, [pc, #108]	@ (80003dc <Button_Init+0xcc>)
 800036e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000372:	6453      	str	r3, [r2, #68]	@ 0x44

    // EXTI3 -> PB3, EXTI4 -> PB4
    SYSCFG->EXTICR[0] &= ~(0xF << (4 * 3)); // Clear EXTI3 (bits 12..15)
 8000374:	4b1b      	ldr	r3, [pc, #108]	@ (80003e4 <Button_Init+0xd4>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	4a1a      	ldr	r2, [pc, #104]	@ (80003e4 <Button_Init+0xd4>)
 800037a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800037e:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |=  (1 << (4 * 3));   // Set PB3 (1 = Port B) for EXTI3
 8000380:	4b18      	ldr	r3, [pc, #96]	@ (80003e4 <Button_Init+0xd4>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	4a17      	ldr	r2, [pc, #92]	@ (80003e4 <Button_Init+0xd4>)
 8000386:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800038a:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[1] &= ~(0xF << 0);       // Clear EXTI4 (bits 0..3)
 800038c:	4b15      	ldr	r3, [pc, #84]	@ (80003e4 <Button_Init+0xd4>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	4a14      	ldr	r2, [pc, #80]	@ (80003e4 <Button_Init+0xd4>)
 8000392:	f023 030f 	bic.w	r3, r3, #15
 8000396:	60d3      	str	r3, [r2, #12]
    SYSCFG->EXTICR[1] |=  (1 << 0);         // Set PB4 (1 = Port B) for EXTI4
 8000398:	4b12      	ldr	r3, [pc, #72]	@ (80003e4 <Button_Init+0xd4>)
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	4a11      	ldr	r2, [pc, #68]	@ (80003e4 <Button_Init+0xd4>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	60d3      	str	r3, [r2, #12]

    // Unmask EXTI3, EXTI4
    EXTI->IMR  |= (1 << 3) | (1 << 4);
 80003a4:	4b10      	ldr	r3, [pc, #64]	@ (80003e8 <Button_Init+0xd8>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a0f      	ldr	r2, [pc, #60]	@ (80003e8 <Button_Init+0xd8>)
 80003aa:	f043 0318 	orr.w	r3, r3, #24
 80003ae:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << 3) | (1 << 4); // Falling edge trigger
 80003b0:	4b0d      	ldr	r3, [pc, #52]	@ (80003e8 <Button_Init+0xd8>)
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	4a0c      	ldr	r2, [pc, #48]	@ (80003e8 <Button_Init+0xd8>)
 80003b6:	f043 0318 	orr.w	r3, r3, #24
 80003ba:	60d3      	str	r3, [r2, #12]

    // Enable NVIC interrupt EXTI3, EXTI4
    NVIC_SetPriority(EXTI3_IRQn, 1);
 80003bc:	2101      	movs	r1, #1
 80003be:	2009      	movs	r0, #9
 80003c0:	f7ff ff7c 	bl	80002bc <__NVIC_SetPriority>
    NVIC_SetPriority(EXTI4_IRQn, 2);
 80003c4:	2102      	movs	r1, #2
 80003c6:	200a      	movs	r0, #10
 80003c8:	f7ff ff78 	bl	80002bc <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI3_IRQn);
 80003cc:	2009      	movs	r0, #9
 80003ce:	f7ff ff57 	bl	8000280 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI4_IRQn);
 80003d2:	200a      	movs	r0, #10
 80003d4:	f7ff ff54 	bl	8000280 <__NVIC_EnableIRQ>
}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40023800 	.word	0x40023800
 80003e0:	40020400 	.word	0x40020400
 80003e4:	40013800 	.word	0x40013800
 80003e8:	40013c00 	.word	0x40013c00

080003ec <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 3)) {
 80003f2:	4b13      	ldr	r3, [pc, #76]	@ (8000440 <EXTI3_IRQHandler+0x54>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f003 0308 	and.w	r3, r3, #8
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d01a      	beq.n	8000434 <EXTI3_IRQHandler+0x48>
        EXTI->PR |= (1 << 3); // Clear pending bit
 80003fe:	4b10      	ldr	r3, [pc, #64]	@ (8000440 <EXTI3_IRQHandler+0x54>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a0f      	ldr	r2, [pc, #60]	@ (8000440 <EXTI3_IRQHandler+0x54>)
 8000404:	f043 0308 	orr.w	r3, r3, #8
 8000408:	6153      	str	r3, [r2, #20]
        uint32_t now = msTicks;
 800040a:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <EXTI3_IRQHandler+0x58>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	607b      	str	r3, [r7, #4]
        if (now - last_sw1_time > DEBOUNCE_TIME) {
 8000410:	4b0d      	ldr	r3, [pc, #52]	@ (8000448 <EXTI3_IRQHandler+0x5c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	2b1e      	cmp	r3, #30
 800041a:	d90b      	bls.n	8000434 <EXTI3_IRQHandler+0x48>
            if ((GPIOB->IDR & (1 << 3)) == 0) { // Button pressed (active low)
 800041c:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <EXTI3_IRQHandler+0x60>)
 800041e:	691b      	ldr	r3, [r3, #16]
 8000420:	f003 0308 	and.w	r3, r3, #8
 8000424:	2b00      	cmp	r3, #0
 8000426:	d105      	bne.n	8000434 <EXTI3_IRQHandler+0x48>
                sw1_flag = 1;
 8000428:	4b09      	ldr	r3, [pc, #36]	@ (8000450 <EXTI3_IRQHandler+0x64>)
 800042a:	2201      	movs	r2, #1
 800042c:	601a      	str	r2, [r3, #0]
                last_sw1_time = now;
 800042e:	4a06      	ldr	r2, [pc, #24]	@ (8000448 <EXTI3_IRQHandler+0x5c>)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	6013      	str	r3, [r2, #0]
            }
        }
    }
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40013c00 	.word	0x40013c00
 8000444:	2000008c 	.word	0x2000008c
 8000448:	20000084 	.word	0x20000084
 800044c:	40020400 	.word	0x40020400
 8000450:	2000007c 	.word	0x2000007c

08000454 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void) {
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 4)) {
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <EXTI4_IRQHandler+0x54>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f003 0310 	and.w	r3, r3, #16
 8000462:	2b00      	cmp	r3, #0
 8000464:	d01a      	beq.n	800049c <EXTI4_IRQHandler+0x48>
        EXTI->PR |= (1 << 4); // Clear pending bit
 8000466:	4b10      	ldr	r3, [pc, #64]	@ (80004a8 <EXTI4_IRQHandler+0x54>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a0f      	ldr	r2, [pc, #60]	@ (80004a8 <EXTI4_IRQHandler+0x54>)
 800046c:	f043 0310 	orr.w	r3, r3, #16
 8000470:	6153      	str	r3, [r2, #20]
        uint32_t now = msTicks;
 8000472:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <EXTI4_IRQHandler+0x58>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	607b      	str	r3, [r7, #4]
        if (now - last_sw2_time > DEBOUNCE_TIME) {
 8000478:	4b0d      	ldr	r3, [pc, #52]	@ (80004b0 <EXTI4_IRQHandler+0x5c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	1ad3      	subs	r3, r2, r3
 8000480:	2b1e      	cmp	r3, #30
 8000482:	d90b      	bls.n	800049c <EXTI4_IRQHandler+0x48>
            if ((GPIOB->IDR & (1 << 4)) == 0) { // Button pressed (active low)
 8000484:	4b0b      	ldr	r3, [pc, #44]	@ (80004b4 <EXTI4_IRQHandler+0x60>)
 8000486:	691b      	ldr	r3, [r3, #16]
 8000488:	f003 0310 	and.w	r3, r3, #16
 800048c:	2b00      	cmp	r3, #0
 800048e:	d105      	bne.n	800049c <EXTI4_IRQHandler+0x48>
                sw2_flag = 1;
 8000490:	4b09      	ldr	r3, [pc, #36]	@ (80004b8 <EXTI4_IRQHandler+0x64>)
 8000492:	2201      	movs	r2, #1
 8000494:	601a      	str	r2, [r3, #0]
                last_sw2_time = now;
 8000496:	4a06      	ldr	r2, [pc, #24]	@ (80004b0 <EXTI4_IRQHandler+0x5c>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6013      	str	r3, [r2, #0]
            }
        }
    }
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	40013c00 	.word	0x40013c00
 80004ac:	2000008c 	.word	0x2000008c
 80004b0:	20000088 	.word	0x20000088
 80004b4:	40020400 	.word	0x40020400
 80004b8:	20000080 	.word	0x20000080

080004bc <Buzzer_Init>:
#include "buzzer.h"
#include "stm32f4xx.h"

void Buzzer_Init(void) {
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80004c0:	4b08      	ldr	r3, [pc, #32]	@ (80004e4 <Buzzer_Init+0x28>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c4:	4a07      	ldr	r2, [pc, #28]	@ (80004e4 <Buzzer_Init+0x28>)
 80004c6:	f043 0302 	orr.w	r3, r3, #2
 80004ca:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER |= (1 << (10 * 2));
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <Buzzer_Init+0x2c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a05      	ldr	r2, [pc, #20]	@ (80004e8 <Buzzer_Init+0x2c>)
 80004d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80004d6:	6013      	str	r3, [r2, #0]
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40023800 	.word	0x40023800
 80004e8:	40020400 	.word	0x40020400

080004ec <Buzzer_On>:

void Buzzer_On(void) {
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
    GPIOB->ODR |= (1 << 10);
 80004f0:	4b05      	ldr	r3, [pc, #20]	@ (8000508 <Buzzer_On+0x1c>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	4a04      	ldr	r2, [pc, #16]	@ (8000508 <Buzzer_On+0x1c>)
 80004f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004fa:	6153      	str	r3, [r2, #20]
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40020400 	.word	0x40020400

0800050c <Buzzer_Off>:

void Buzzer_Off(void) {
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
    GPIOB->ODR &= ~(1 << 10);
 8000510:	4b05      	ldr	r3, [pc, #20]	@ (8000528 <Buzzer_Off+0x1c>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	4a04      	ldr	r2, [pc, #16]	@ (8000528 <Buzzer_Off+0x1c>)
 8000516:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800051a:	6153      	str	r3, [r2, #20]
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40020400 	.word	0x40020400

0800052c <Delay_Init>:
#include "stm32f4xx.h"

volatile uint32_t msTicks = 0;

// Hàm khởi tạo SysTick cho delay ms
void Delay_Init(void) {
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
    // Sử dụng SystemCoreClock để đảm bảo đúng mọi cấu hình clock
    SysTick->LOAD = (SystemCoreClock / 1000) - 1;
 8000530:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <Delay_Init+0x2c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a09      	ldr	r2, [pc, #36]	@ (800055c <Delay_Init+0x30>)
 8000536:	fba2 2303 	umull	r2, r3, r2, r3
 800053a:	099b      	lsrs	r3, r3, #6
 800053c:	4a08      	ldr	r2, [pc, #32]	@ (8000560 <Delay_Init+0x34>)
 800053e:	3b01      	subs	r3, #1
 8000540:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;
 8000542:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <Delay_Init+0x34>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk;
 8000548:	4b05      	ldr	r3, [pc, #20]	@ (8000560 <Delay_Init+0x34>)
 800054a:	2207      	movs	r2, #7
 800054c:	601a      	str	r2, [r3, #0]
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	2000000c 	.word	0x2000000c
 800055c:	10624dd3 	.word	0x10624dd3
 8000560:	e000e010 	.word	0xe000e010

08000564 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
    msTicks++; // Sửa lại đúng tên biến
 8000568:	4b04      	ldr	r3, [pc, #16]	@ (800057c <SysTick_Handler+0x18>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3301      	adds	r3, #1
 800056e:	4a03      	ldr	r2, [pc, #12]	@ (800057c <SysTick_Handler+0x18>)
 8000570:	6013      	str	r3, [r2, #0]
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	2000008c 	.word	0x2000008c

08000580 <Delay_ms>:

// Delay ms không bị trôi nhờ biến msTicks
void Delay_ms(uint32_t ms) {
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    uint32_t startTicks = msTicks;
 8000588:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <Delay_ms+0x2c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	60fb      	str	r3, [r7, #12]
    while ((msTicks - startTicks) < ms);
 800058e:	bf00      	nop
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <Delay_ms+0x2c>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	1ad3      	subs	r3, r2, r3
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	429a      	cmp	r2, r3
 800059c:	d8f8      	bhi.n	8000590 <Delay_ms+0x10>
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	2000008c 	.word	0x2000008c

080005b0 <GasMonitor_GetAlertLevel>:
#include "buzzer.h"
#include "relay.h"
#include "lcd_display.h"
#include "uart.h"

GasAlertLevel_t GasMonitor_GetAlertLevel(float ppm) {
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (ppm < 100) return GAS_SAFE;
 80005ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80005be:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800060c <GasMonitor_GetAlertLevel+0x5c>
 80005c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ca:	d501      	bpl.n	80005d0 <GasMonitor_GetAlertLevel+0x20>
 80005cc:	2300      	movs	r3, #0
 80005ce:	e016      	b.n	80005fe <GasMonitor_GetAlertLevel+0x4e>
    else if (ppm < 300) return GAS_LOW;
 80005d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80005d4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000610 <GasMonitor_GetAlertLevel+0x60>
 80005d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005e0:	d501      	bpl.n	80005e6 <GasMonitor_GetAlertLevel+0x36>
 80005e2:	2301      	movs	r3, #1
 80005e4:	e00b      	b.n	80005fe <GasMonitor_GetAlertLevel+0x4e>
    else if (ppm < 500) return GAS_HIGH;
 80005e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80005ea:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000614 <GasMonitor_GetAlertLevel+0x64>
 80005ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005f6:	d501      	bpl.n	80005fc <GasMonitor_GetAlertLevel+0x4c>
 80005f8:	2302      	movs	r3, #2
 80005fa:	e000      	b.n	80005fe <GasMonitor_GetAlertLevel+0x4e>
    else return GAS_DANGEROUS;
 80005fc:	2303      	movs	r3, #3
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	42c80000 	.word	0x42c80000
 8000610:	43960000 	.word	0x43960000
 8000614:	43fa0000 	.word	0x43fa0000

08000618 <GasMonitor_UpdateState>:

void GasMonitor_UpdateState(SystemState_t sysState, float ppm) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	ed87 0a00 	vstr	s0, [r7]
 8000624:	71fb      	strb	r3, [r7, #7]
    GasAlertLevel_t alertLevel = GasMonitor_GetAlertLevel(ppm);
 8000626:	ed97 0a00 	vldr	s0, [r7]
 800062a:	f7ff ffc1 	bl	80005b0 <GasMonitor_GetAlertLevel>
 800062e:	4603      	mov	r3, r0
 8000630:	73fb      	strb	r3, [r7, #15]

    if (sysState == SYSTEM_STOPPED) {
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d10e      	bne.n	8000656 <GasMonitor_UpdateState+0x3e>
        LED_SetGreen();
 8000638:	f000 fae0 	bl	8000bfc <LED_SetGreen>
        Buzzer_Off();
 800063c:	f7ff ff66 	bl	800050c <Buzzer_Off>
        Relay_On();
 8000640:	f000 fd74 	bl	800112c <Relay_On>
        LCD_DisplayStatus(sysState, alertLevel, ppm);
 8000644:	7bfa      	ldrb	r2, [r7, #15]
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	ed97 0a00 	vldr	s0, [r7]
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f854 	bl	80006fc <LCD_DisplayStatus>
        return;
 8000654:	e04d      	b.n	80006f2 <GasMonitor_UpdateState+0xda>
    }

    switch (alertLevel) {
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	2b03      	cmp	r3, #3
 800065a:	d83b      	bhi.n	80006d4 <GasMonitor_UpdateState+0xbc>
 800065c:	a201      	add	r2, pc, #4	@ (adr r2, 8000664 <GasMonitor_UpdateState+0x4c>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	08000675 	.word	0x08000675
 8000668:	08000683 	.word	0x08000683
 800066c:	08000691 	.word	0x08000691
 8000670:	080006a7 	.word	0x080006a7
        case GAS_SAFE:
            LED_SetBlue();
 8000674:	f000 fa96 	bl	8000ba4 <LED_SetBlue>
            Buzzer_Off();
 8000678:	f7ff ff48 	bl	800050c <Buzzer_Off>
            Relay_On();
 800067c:	f000 fd56 	bl	800112c <Relay_On>
            break;
 8000680:	e02f      	b.n	80006e2 <GasMonitor_UpdateState+0xca>
        case GAS_LOW:
            LED_SetYellow();
 8000682:	f000 faa5 	bl	8000bd0 <LED_SetYellow>
            Buzzer_Off();
 8000686:	f7ff ff41 	bl	800050c <Buzzer_Off>
            Relay_On();
 800068a:	f000 fd4f 	bl	800112c <Relay_On>
            break;
 800068e:	e028      	b.n	80006e2 <GasMonitor_UpdateState+0xca>
        case GAS_HIGH:
            LED_BlinkRed(1.0f, 1000); // 1Hz
 8000690:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000694:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000698:	f000 fac6 	bl	8000c28 <LED_BlinkRed>
            Buzzer_Off();
 800069c:	f7ff ff36 	bl	800050c <Buzzer_Off>
            Relay_On();
 80006a0:	f000 fd44 	bl	800112c <Relay_On>
            break;
 80006a4:	e01d      	b.n	80006e2 <GasMonitor_UpdateState+0xca>
        case GAS_DANGEROUS:
        	float freq_now = Get_BlinkFreq_ByPPM(ppm,  500);
 80006a6:	eddf 0a14 	vldr	s1, [pc, #80]	@ 80006f8 <GasMonitor_UpdateState+0xe0>
 80006aa:	ed97 0a00 	vldr	s0, [r7]
 80006ae:	f000 fb13 	bl	8000cd8 <Get_BlinkFreq_ByPPM>
 80006b2:	ed87 0a02 	vstr	s0, [r7, #8]
            LED_BlinkRed(freq_now, 1000);
 80006b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80006be:	f000 fab3 	bl	8000c28 <LED_BlinkRed>
            Buzzer_On();
 80006c2:	f7ff ff13 	bl	80004ec <Buzzer_On>
            Relay_Off();
 80006c6:	f000 fd41 	bl	800114c <Relay_Off>
            Send_Alert_ToESP(ppm);
 80006ca:	ed97 0a00 	vldr	s0, [r7]
 80006ce:	f000 fe27 	bl	8001320 <Send_Alert_ToESP>
            break;
 80006d2:	e006      	b.n	80006e2 <GasMonitor_UpdateState+0xca>
        default:
            LED_SetBlue();
 80006d4:	f000 fa66 	bl	8000ba4 <LED_SetBlue>
            Buzzer_Off();
 80006d8:	f7ff ff18 	bl	800050c <Buzzer_Off>
            Relay_On();
 80006dc:	f000 fd26 	bl	800112c <Relay_On>
            break;
 80006e0:	bf00      	nop
    }

    LCD_DisplayStatus(sysState, alertLevel, ppm);
 80006e2:	7bfa      	ldrb	r2, [r7, #15]
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	ed97 0a00 	vldr	s0, [r7]
 80006ea:	4611      	mov	r1, r2
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 f805 	bl	80006fc <LCD_DisplayStatus>
}
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	43fa0000 	.word	0x43fa0000

080006fc <LCD_DisplayStatus>:
#include "lcd_display.h"
#include "lcd_i2c.h"
#include <stdio.h>

void LCD_DisplayStatus(SystemState_t sysState, GasAlertLevel_t alertLevel, float ppm) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	@ 0x38
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	460a      	mov	r2, r1
 8000706:	ed87 0a00 	vstr	s0, [r7]
 800070a:	71fb      	strb	r3, [r7, #7]
 800070c:	4613      	mov	r3, r2
 800070e:	71bb      	strb	r3, [r7, #6]
    static int last_ppm = -1;
    static SystemState_t last_sysState = -1;
    static GasAlertLevel_t last_alertLevel = -1;

    int ppm_int = (int)(ppm + 0.5f);
 8000710:	edd7 7a00 	vldr	s15, [r7]
 8000714:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000718:	ee77 7a87 	vadd.f32	s15, s15, s14
 800071c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000720:	ee17 3a90 	vmov	r3, s15
 8000724:	633b      	str	r3, [r7, #48]	@ 0x30

    // Chỉ cập nhật khi có thay đổi dữ liệu
    if (ppm_int != last_ppm || sysState != last_sysState || alertLevel != last_alertLevel) {
 8000726:	4b2f      	ldr	r3, [pc, #188]	@ (80007e4 <LCD_DisplayStatus+0xe8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800072c:	429a      	cmp	r2, r3
 800072e:	d109      	bne.n	8000744 <LCD_DisplayStatus+0x48>
 8000730:	4b2d      	ldr	r3, [pc, #180]	@ (80007e8 <LCD_DisplayStatus+0xec>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	79fa      	ldrb	r2, [r7, #7]
 8000736:	429a      	cmp	r2, r3
 8000738:	d104      	bne.n	8000744 <LCD_DisplayStatus+0x48>
 800073a:	4b2c      	ldr	r3, [pc, #176]	@ (80007ec <LCD_DisplayStatus+0xf0>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	79ba      	ldrb	r2, [r7, #6]
 8000740:	429a      	cmp	r2, r3
 8000742:	d04b      	beq.n	80007dc <LCD_DisplayStatus+0xe0>
        char line1[17], line2[17];

        sprintf(line1, "Sys: %d %s",
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2b01      	cmp	r3, #1
 8000748:	bf0c      	ite	eq
 800074a:	2301      	moveq	r3, #1
 800074c:	2300      	movne	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	461a      	mov	r2, r3
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d101      	bne.n	800075c <LCD_DisplayStatus+0x60>
 8000758:	4b25      	ldr	r3, [pc, #148]	@ (80007f0 <LCD_DisplayStatus+0xf4>)
 800075a:	e000      	b.n	800075e <LCD_DisplayStatus+0x62>
 800075c:	4b25      	ldr	r3, [pc, #148]	@ (80007f4 <LCD_DisplayStatus+0xf8>)
 800075e:	f107 001c 	add.w	r0, r7, #28
 8000762:	4925      	ldr	r1, [pc, #148]	@ (80007f8 <LCD_DisplayStatus+0xfc>)
 8000764:	f000 fe58 	bl	8001418 <siprintf>
            (sysState == SYSTEM_RUNNING) ? 1 : 0,
            (sysState == SYSTEM_RUNNING) ? "RUN " : "STOP");

        const char* alertStr = "Safe";
 8000768:	4b24      	ldr	r3, [pc, #144]	@ (80007fc <LCD_DisplayStatus+0x100>)
 800076a:	637b      	str	r3, [r7, #52]	@ 0x34
        switch (alertLevel) {
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d00c      	beq.n	800078c <LCD_DisplayStatus+0x90>
 8000772:	2b03      	cmp	r3, #3
 8000774:	dc0d      	bgt.n	8000792 <LCD_DisplayStatus+0x96>
 8000776:	2b01      	cmp	r3, #1
 8000778:	d002      	beq.n	8000780 <LCD_DisplayStatus+0x84>
 800077a:	2b02      	cmp	r3, #2
 800077c:	d003      	beq.n	8000786 <LCD_DisplayStatus+0x8a>
 800077e:	e008      	b.n	8000792 <LCD_DisplayStatus+0x96>
            case GAS_LOW:        alertStr = "Low ";     break;
 8000780:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <LCD_DisplayStatus+0x104>)
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
 8000784:	e008      	b.n	8000798 <LCD_DisplayStatus+0x9c>
            case GAS_HIGH:       alertStr = "High";     break;
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <LCD_DisplayStatus+0x108>)
 8000788:	637b      	str	r3, [r7, #52]	@ 0x34
 800078a:	e005      	b.n	8000798 <LCD_DisplayStatus+0x9c>
            case GAS_DANGEROUS:  alertStr = "DANGER";   break;
 800078c:	4b1e      	ldr	r3, [pc, #120]	@ (8000808 <LCD_DisplayStatus+0x10c>)
 800078e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000790:	e002      	b.n	8000798 <LCD_DisplayStatus+0x9c>
            default:             alertStr = "Safe";     break;
 8000792:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <LCD_DisplayStatus+0x100>)
 8000794:	637b      	str	r3, [r7, #52]	@ 0x34
 8000796:	bf00      	nop
        }
        sprintf(line2, "%s PPM: %d      ", alertStr, ppm_int); // Thêm khoảng trắng xóa ký tự thừa nếu có
 8000798:	f107 0008 	add.w	r0, r7, #8
 800079c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800079e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007a0:	491a      	ldr	r1, [pc, #104]	@ (800080c <LCD_DisplayStatus+0x110>)
 80007a2:	f000 fe39 	bl	8001418 <siprintf>

        LCD_SetCursor(0, 0);
 80007a6:	2100      	movs	r1, #0
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 f923 	bl	80009f4 <LCD_SetCursor>
        LCD_Print(line1);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f942 	bl	8000a3c <LCD_Print>
        LCD_SetCursor(1, 0);
 80007b8:	2100      	movs	r1, #0
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 f91a 	bl	80009f4 <LCD_SetCursor>
        LCD_Print(line2);
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 f939 	bl	8000a3c <LCD_Print>

        // Lưu lại dữ liệu cũ
        last_ppm = ppm_int;
 80007ca:	4a06      	ldr	r2, [pc, #24]	@ (80007e4 <LCD_DisplayStatus+0xe8>)
 80007cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007ce:	6013      	str	r3, [r2, #0]
        last_sysState = sysState;
 80007d0:	4a05      	ldr	r2, [pc, #20]	@ (80007e8 <LCD_DisplayStatus+0xec>)
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	7013      	strb	r3, [r2, #0]
        last_alertLevel = alertLevel;
 80007d6:	4a05      	ldr	r2, [pc, #20]	@ (80007ec <LCD_DisplayStatus+0xf0>)
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	7013      	strb	r3, [r2, #0]
    }
}
 80007dc:	bf00      	nop
 80007de:	3738      	adds	r7, #56	@ 0x38
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000004 	.word	0x20000004
 80007ec:	20000005 	.word	0x20000005
 80007f0:	080024f4 	.word	0x080024f4
 80007f4:	080024fc 	.word	0x080024fc
 80007f8:	08002504 	.word	0x08002504
 80007fc:	08002510 	.word	0x08002510
 8000800:	08002518 	.word	0x08002518
 8000804:	08002520 	.word	0x08002520
 8000808:	08002528 	.word	0x08002528
 800080c:	08002530 	.word	0x08002530

08000810 <delay_ms>:
#define LCD_BACKLIGHT 0x08
#define LCD_ENABLE    0x04
#define LCD_RW        0x02
#define LCD_RS        0x01

static void delay_ms(uint32_t ms) {
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    volatile uint32_t i;
    while(ms--) {
 8000818:	e00a      	b.n	8000830 <delay_ms+0x20>
        for(i=0; i<4000; i++) {
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	e003      	b.n	8000828 <delay_ms+0x18>
            __NOP();
 8000820:	bf00      	nop
        for(i=0; i<4000; i++) {
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3301      	adds	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800082e:	d3f7      	bcc.n	8000820 <delay_ms+0x10>
    while(ms--) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1ef      	bne.n	800081a <delay_ms+0xa>
        }
    }
}
 800083a:	bf00      	nop
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <I2C1_Init>:

void I2C1_Init(void) {
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800084c:	4b2d      	ldr	r3, [pc, #180]	@ (8000904 <I2C1_Init+0xbc>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000850:	4a2c      	ldr	r2, [pc, #176]	@ (8000904 <I2C1_Init+0xbc>)
 8000852:	f043 0302 	orr.w	r3, r3, #2
 8000856:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~((3 << (8 * 2)) | (3 << (9 * 2)));
 8000858:	4b2b      	ldr	r3, [pc, #172]	@ (8000908 <I2C1_Init+0xc0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a2a      	ldr	r2, [pc, #168]	@ (8000908 <I2C1_Init+0xc0>)
 800085e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000862:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (2 << (8 * 2)) | (2 << (9 * 2));
 8000864:	4b28      	ldr	r3, [pc, #160]	@ (8000908 <I2C1_Init+0xc0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a27      	ldr	r2, [pc, #156]	@ (8000908 <I2C1_Init+0xc0>)
 800086a:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800086e:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << 8) | (1 << 9);
 8000870:	4b25      	ldr	r3, [pc, #148]	@ (8000908 <I2C1_Init+0xc0>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	4a24      	ldr	r2, [pc, #144]	@ (8000908 <I2C1_Init+0xc0>)
 8000876:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800087a:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~((3 << (8 * 2)) | (3 << (9 * 2)));
 800087c:	4b22      	ldr	r3, [pc, #136]	@ (8000908 <I2C1_Init+0xc0>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	4a21      	ldr	r2, [pc, #132]	@ (8000908 <I2C1_Init+0xc0>)
 8000882:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000886:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << (8 * 2)) | (1 << (9 * 2));
 8000888:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <I2C1_Init+0xc0>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	4a1e      	ldr	r2, [pc, #120]	@ (8000908 <I2C1_Init+0xc0>)
 800088e:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000892:	60d3      	str	r3, [r2, #12]
    GPIOB->OSPEEDR |= (3 << (8 * 2)) | (3 << (9 * 2));
 8000894:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <I2C1_Init+0xc0>)
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	4a1b      	ldr	r2, [pc, #108]	@ (8000908 <I2C1_Init+0xc0>)
 800089a:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800089e:	6093      	str	r3, [r2, #8]
    GPIOB->AFR[1] &= ~((0xF << ((8 - 8) * 4)) | (0xF << ((9 - 8) * 4)));
 80008a0:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <I2C1_Init+0xc0>)
 80008a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008a4:	4a18      	ldr	r2, [pc, #96]	@ (8000908 <I2C1_Init+0xc0>)
 80008a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80008aa:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= (4 << ((8 - 8) * 4)) | (4 << ((9 - 8) * 4));
 80008ac:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <I2C1_Init+0xc0>)
 80008ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008b0:	4a15      	ldr	r2, [pc, #84]	@ (8000908 <I2C1_Init+0xc0>)
 80008b2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80008b6:	6253      	str	r3, [r2, #36]	@ 0x24
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <I2C1_Init+0xbc>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	4a11      	ldr	r2, [pc, #68]	@ (8000904 <I2C1_Init+0xbc>)
 80008be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008c2:	6413      	str	r3, [r2, #64]	@ 0x40
    I2C1->CR1 |= I2C_CR1_SWRST;
 80008c4:	4b11      	ldr	r3, [pc, #68]	@ (800090c <I2C1_Init+0xc4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a10      	ldr	r2, [pc, #64]	@ (800090c <I2C1_Init+0xc4>)
 80008ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008ce:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= ~I2C_CR1_SWRST;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <I2C1_Init+0xc4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0d      	ldr	r2, [pc, #52]	@ (800090c <I2C1_Init+0xc4>)
 80008d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008da:	6013      	str	r3, [r2, #0]
    I2C1->CR2 = 16;
 80008dc:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <I2C1_Init+0xc4>)
 80008de:	2210      	movs	r2, #16
 80008e0:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80;
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <I2C1_Init+0xc4>)
 80008e4:	2250      	movs	r2, #80	@ 0x50
 80008e6:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;
 80008e8:	4b08      	ldr	r3, [pc, #32]	@ (800090c <I2C1_Init+0xc4>)
 80008ea:	2211      	movs	r2, #17
 80008ec:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 80008ee:	4b07      	ldr	r3, [pc, #28]	@ (800090c <I2C1_Init+0xc4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a06      	ldr	r2, [pc, #24]	@ (800090c <I2C1_Init+0xc4>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6013      	str	r3, [r2, #0]
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400
 800090c:	40005400 	.word	0x40005400

08000910 <I2C1_WriteByte>:

int I2C1_WriteByte(uint8_t dev_addr, uint8_t data) {
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	460a      	mov	r2, r1
 800091a:	71fb      	strb	r3, [r7, #7]
 800091c:	4613      	mov	r3, r2
 800091e:	71bb      	strb	r3, [r7, #6]
    I2C1->CR1 |= I2C_CR1_START;
 8000920:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <I2C1_WriteByte+0x74>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a17      	ldr	r2, [pc, #92]	@ (8000984 <I2C1_WriteByte+0x74>)
 8000926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800092a:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 800092c:	bf00      	nop
 800092e:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <I2C1_WriteByte+0x74>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	2b00      	cmp	r3, #0
 8000938:	d0f9      	beq.n	800092e <I2C1_WriteByte+0x1e>
    I2C1->DR = (dev_addr << 1) | 0;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	4a11      	ldr	r2, [pc, #68]	@ (8000984 <I2C1_WriteByte+0x74>)
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000942:	bf00      	nop
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <I2C1_WriteByte+0x74>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	f003 0302 	and.w	r3, r3, #2
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0f9      	beq.n	8000944 <I2C1_WriteByte+0x34>
    (void)I2C1->SR2;
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <I2C1_WriteByte+0x74>)
 8000952:	699b      	ldr	r3, [r3, #24]
    I2C1->DR = data;
 8000954:	4a0b      	ldr	r2, [pc, #44]	@ (8000984 <I2C1_WriteByte+0x74>)
 8000956:	79bb      	ldrb	r3, [r7, #6]
 8000958:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 800095a:	bf00      	nop
 800095c:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <I2C1_WriteByte+0x74>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000964:	2b00      	cmp	r3, #0
 8000966:	d0f9      	beq.n	800095c <I2C1_WriteByte+0x4c>
    I2C1->CR1 |= I2C_CR1_STOP;
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <I2C1_WriteByte+0x74>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a05      	ldr	r2, [pc, #20]	@ (8000984 <I2C1_WriteByte+0x74>)
 800096e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000972:	6013      	str	r3, [r2, #0]
    return 0;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40005400 	.word	0x40005400

08000988 <LCD_Init>:
static void LCD_Write4Bits(uint8_t data);
static void LCD_Send(uint8_t value, uint8_t mode);
static void LCD_SendCommand(uint8_t cmd);
static void LCD_SendData(uint8_t data);

void LCD_Init(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
    I2C1_Init();
 800098c:	f7ff ff5c 	bl	8000848 <I2C1_Init>
    delay_ms(50);
 8000990:	2032      	movs	r0, #50	@ 0x32
 8000992:	f7ff ff3d 	bl	8000810 <delay_ms>
    LCD_Write4Bits(0x30);
 8000996:	2030      	movs	r0, #48	@ 0x30
 8000998:	f000 f8a9 	bl	8000aee <LCD_Write4Bits>
    delay_ms(5);
 800099c:	2005      	movs	r0, #5
 800099e:	f7ff ff37 	bl	8000810 <delay_ms>
    LCD_Write4Bits(0x30);
 80009a2:	2030      	movs	r0, #48	@ 0x30
 80009a4:	f000 f8a3 	bl	8000aee <LCD_Write4Bits>
    delay_ms(1);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff ff31 	bl	8000810 <delay_ms>
    LCD_Write4Bits(0x30);
 80009ae:	2030      	movs	r0, #48	@ 0x30
 80009b0:	f000 f89d 	bl	8000aee <LCD_Write4Bits>
    delay_ms(10);
 80009b4:	200a      	movs	r0, #10
 80009b6:	f7ff ff2b 	bl	8000810 <delay_ms>
    LCD_Write4Bits(0x20);
 80009ba:	2020      	movs	r0, #32
 80009bc:	f000 f897 	bl	8000aee <LCD_Write4Bits>
    LCD_SendCommand(0x28);
 80009c0:	2028      	movs	r0, #40	@ 0x28
 80009c2:	f000 f851 	bl	8000a68 <LCD_SendCommand>
    LCD_SendCommand(0x08);
 80009c6:	2008      	movs	r0, #8
 80009c8:	f000 f84e 	bl	8000a68 <LCD_SendCommand>
    LCD_Clear();
 80009cc:	f000 f808 	bl	80009e0 <LCD_Clear>
    LCD_SendCommand(0x06);
 80009d0:	2006      	movs	r0, #6
 80009d2:	f000 f849 	bl	8000a68 <LCD_SendCommand>
    LCD_SendCommand(0x0C);
 80009d6:	200c      	movs	r0, #12
 80009d8:	f000 f846 	bl	8000a68 <LCD_SendCommand>
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <LCD_Clear>:

void LCD_Clear(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f000 f83f 	bl	8000a68 <LCD_SendCommand>
    delay_ms(2);
 80009ea:	2002      	movs	r0, #2
 80009ec:	f7ff ff10 	bl	8000810 <delay_ms>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	460a      	mov	r2, r1
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	4613      	mov	r3, r2
 8000a02:	71bb      	strb	r3, [r7, #6]
    const uint8_t row_offsets[] = {0x00, 0x40};
 8000a04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a08:	81bb      	strh	r3, [r7, #12]
    if (row > 1) row = 1;
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d901      	bls.n	8000a14 <LCD_SetCursor+0x20>
 8000a10:	2301      	movs	r3, #1
 8000a12:	71fb      	strb	r3, [r7, #7]
    LCD_SendCommand(0x80 | (col + row_offsets[row]));
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	3310      	adds	r3, #16
 8000a18:	443b      	add	r3, r7
 8000a1a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000a1e:	79bb      	ldrb	r3, [r7, #6]
 8000a20:	4413      	add	r3, r2
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	b25b      	sxtb	r3, r3
 8000a26:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a2a:	b25b      	sxtb	r3, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f81a 	bl	8000a68 <LCD_SendCommand>
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <LCD_Print>:

void LCD_Print(char* str) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
    while(*str) {
 8000a44:	e007      	b.n	8000a56 <LCD_Print+0x1a>
        LCD_SendData((uint8_t)(*str));
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f81a 	bl	8000a84 <LCD_SendData>
        str++;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3301      	adds	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
    while(*str) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1f3      	bne.n	8000a46 <LCD_Print+0xa>
    }
}
 8000a5e:	bf00      	nop
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <LCD_SendCommand>:

static void LCD_SendCommand(uint8_t cmd) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, 0);
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f812 	bl	8000aa0 <LCD_Send>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <LCD_SendData>:

static void LCD_SendData(uint8_t data) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data, LCD_RS);
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2101      	movs	r1, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f804 	bl	8000aa0 <LCD_Send>
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <LCD_Send>:

static void LCD_Send(uint8_t value, uint8_t mode) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	460a      	mov	r2, r1
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	4613      	mov	r3, r2
 8000aae:	71bb      	strb	r3, [r7, #6]
    uint8_t high_nibble = value & 0xF0;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f023 030f 	bic.w	r3, r3, #15
 8000ab6:	73fb      	strb	r3, [r7, #15]
    uint8_t low_nibble = (value << 4) & 0xF0;
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	011b      	lsls	r3, r3, #4
 8000abc:	73bb      	strb	r3, [r7, #14]
    LCD_Write4Bits(high_nibble | mode | LCD_BACKLIGHT);
 8000abe:	7bfa      	ldrb	r2, [r7, #15]
 8000ac0:	79bb      	ldrb	r3, [r7, #6]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f043 0308 	orr.w	r3, r3, #8
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f80e 	bl	8000aee <LCD_Write4Bits>
    LCD_Write4Bits(low_nibble | mode | LCD_BACKLIGHT);
 8000ad2:	7bba      	ldrb	r2, [r7, #14]
 8000ad4:	79bb      	ldrb	r3, [r7, #6]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f804 	bl	8000aee <LCD_Write4Bits>
}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <LCD_Write4Bits>:

static void LCD_Write4Bits(uint8_t data) {
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
    LCD_ExpanderWrite(data);
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f808 	bl	8000b10 <LCD_ExpanderWrite>
    LCD_PulseEnable(data);
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f812 	bl	8000b2c <LCD_PulseEnable>
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <LCD_ExpanderWrite>:

static void LCD_ExpanderWrite(uint8_t data) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
    I2C1_WriteByte(LCD_I2C_ADDR, data);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	2027      	movs	r0, #39	@ 0x27
 8000b20:	f7ff fef6 	bl	8000910 <I2C1_WriteByte>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <LCD_PulseEnable>:

static void LCD_PulseEnable(uint8_t data) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
    LCD_ExpanderWrite(data | LCD_ENABLE);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ffe6 	bl	8000b10 <LCD_ExpanderWrite>
    delay_ms(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f7ff fe63 	bl	8000810 <delay_ms>
    LCD_ExpanderWrite(data & ~LCD_ENABLE);
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f023 0304 	bic.w	r3, r3, #4
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ffdc 	bl	8000b10 <LCD_ExpanderWrite>
    delay_ms(1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff fe59 	bl	8000810 <delay_ms>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <LED_Init>:
// LED Đỏ   : PA5
// LED Vàng : PA6
// LED Xanh Dương: PA7
// LED Xanh Lá: PA8  (đã chuyển từ PA9 sang PA8)

void LED_Init(void) {
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
    // Bật clock cho GPIOA
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <LED_Init+0x34>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b70:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <LED_Init+0x34>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6313      	str	r3, [r2, #48]	@ 0x30
    // PA5, PA6, PA7, PA8 output (01)
    GPIOA->MODER |= (1 << (5 * 2)) | (1 << (6 * 2)) | (1 << (7 * 2)) | (1 << (8 * 2));
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <LED_Init+0x38>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a08      	ldr	r2, [pc, #32]	@ (8000ba0 <LED_Init+0x38>)
 8000b7e:	f443 33aa 	orr.w	r3, r3, #87040	@ 0x15400
 8000b82:	6013      	str	r3, [r2, #0]
    // Tắt toàn bộ các LED khi khởi động
    GPIOA->ODR &= ~((1 << 5) | (1 << 6) | (1 << 7) | (1 << 8));
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <LED_Init+0x38>)
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	4a05      	ldr	r2, [pc, #20]	@ (8000ba0 <LED_Init+0x38>)
 8000b8a:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8000b8e:	6153      	str	r3, [r2, #20]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <LED_SetBlue>:

void LED_SetBlue(void) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
    GPIOA->ODR |= (1 << 7);    // Bật LED xanh dương (PA7)
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <LED_SetBlue+0x28>)
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <LED_SetBlue+0x28>)
 8000bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bb2:	6153      	str	r3, [r2, #20]
    GPIOA->ODR &= ~((1 << 5) | (1 << 6) | (1 << 8)); // Tắt đỏ, vàng, xanh lá
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <LED_SetBlue+0x28>)
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <LED_SetBlue+0x28>)
 8000bba:	f423 73b0 	bic.w	r3, r3, #352	@ 0x160
 8000bbe:	6153      	str	r3, [r2, #20]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <LED_SetYellow>:

void LED_SetYellow(void) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
    GPIOA->ODR |= (1 << 6);    // Bật LED vàng (PA6)
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <LED_SetYellow+0x28>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	@ (8000bf8 <LED_SetYellow+0x28>)
 8000bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bde:	6153      	str	r3, [r2, #20]
    GPIOA->ODR &= ~((1 << 5) | (1 << 7) | (1 << 8)); // Tắt đỏ, xanh dương, xanh lá
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <LED_SetYellow+0x28>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <LED_SetYellow+0x28>)
 8000be6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8000bea:	6153      	str	r3, [r2, #20]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40020000 	.word	0x40020000

08000bfc <LED_SetGreen>:

void LED_SetGreen(void) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
    GPIOA->ODR |= (1 << 8);    // Bật LED xanh lá (PA8)
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <LED_SetGreen+0x28>)
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	4a07      	ldr	r2, [pc, #28]	@ (8000c24 <LED_SetGreen+0x28>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c0a:	6153      	str	r3, [r2, #20]
    GPIOA->ODR &= ~((1 << 5) | (1 << 6) | (1 << 7)); // Tắt các LED còn lại
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <LED_SetGreen+0x28>)
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <LED_SetGreen+0x28>)
 8000c12:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8000c16:	6153      	str	r3, [r2, #20]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40020000 	.word	0x40020000

08000c28 <LED_BlinkRed>:

void LED_BlinkRed(float freq_hz, int duration_ms) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c32:	6038      	str	r0, [r7, #0]
    int total_blinks = (int)(freq_hz * duration_ms / 1000.0f);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	ee07 3a90 	vmov	s15, r3
 8000c3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c46:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000ccc <LED_BlinkRed+0xa4>
 8000c4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c52:	ee17 3a90 	vmov	r3, s15
 8000c56:	613b      	str	r3, [r7, #16]
    int delay_half = (int)(500.0f / freq_hz); // ms mỗi nửa chu kỳ
 8000c58:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000cd0 <LED_BlinkRed+0xa8>
 8000c5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c68:	ee17 3a90 	vmov	r3, s15
 8000c6c:	60fb      	str	r3, [r7, #12]

    // Tắt các LED khác
    GPIOA->ODR &= ~((1 << 6) | (1 << 7) | (1 << 8));
 8000c6e:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <LED_BlinkRed+0xac>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	4a18      	ldr	r2, [pc, #96]	@ (8000cd4 <LED_BlinkRed+0xac>)
 8000c74:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8000c78:	6153      	str	r3, [r2, #20]

    for (int i = 0; i < total_blinks; i++) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e016      	b.n	8000cae <LED_BlinkRed+0x86>
        GPIOA->ODR ^= (1 << 5); // Đảo trạng thái led đỏ (PA5)
 8000c80:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <LED_BlinkRed+0xac>)
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	4a13      	ldr	r2, [pc, #76]	@ (8000cd4 <LED_BlinkRed+0xac>)
 8000c86:	f083 0320 	eor.w	r3, r3, #32
 8000c8a:	6153      	str	r3, [r2, #20]
        Delay_ms(delay_half);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fc76 	bl	8000580 <Delay_ms>
        GPIOA->ODR ^= (1 << 5);
 8000c94:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <LED_BlinkRed+0xac>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd4 <LED_BlinkRed+0xac>)
 8000c9a:	f083 0320 	eor.w	r3, r3, #32
 8000c9e:	6153      	str	r3, [r2, #20]
        Delay_ms(delay_half);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fc6c 	bl	8000580 <Delay_ms>
    for (int i = 0; i < total_blinks; i++) {
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3301      	adds	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	dbe4      	blt.n	8000c80 <LED_BlinkRed+0x58>
    }
    GPIOA->ODR &= ~(1 << 5); // Đảm bảo tắt led đỏ khi xong
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <LED_BlinkRed+0xac>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	4a06      	ldr	r2, [pc, #24]	@ (8000cd4 <LED_BlinkRed+0xac>)
 8000cbc:	f023 0320 	bic.w	r3, r3, #32
 8000cc0:	6153      	str	r3, [r2, #20]
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	447a0000 	.word	0x447a0000
 8000cd0:	43fa0000 	.word	0x43fa0000
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <Get_BlinkFreq_ByPPM>:

// Hàm tính tần số nháy LED đỏ dựa vào ppm khí gas so với ngưỡng nguy hiểm
float Get_BlinkFreq_ByPPM(float ppm, float ppm_danger) {
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ce2:	edc7 0a00 	vstr	s1, [r7]
    // Vượt nguy hiểm: scale từ 2Hz (ngưỡng nguy hiểm) đến 10Hz (ppm rất cao)
    float k = (ppm - ppm_danger) / (ppm_danger);  // 0 ~ tăng dần
 8000ce6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cea:	edd7 7a00 	vldr	s15, [r7]
 8000cee:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000cf2:	ed97 7a00 	vldr	s14, [r7]
 8000cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cfa:	edc7 7a02 	vstr	s15, [r7, #8]
    float freq = 2.0f + k * 8.0f;                 // 2Hz đến 10Hz
 8000cfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d02:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d0a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000d0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d12:	edc7 7a03 	vstr	s15, [r7, #12]
    if (freq > 10.0f) freq = 10.0f;
 8000d16:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d1a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d26:	dd01      	ble.n	8000d2c <Get_BlinkFreq_ByPPM+0x54>
 8000d28:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <Get_BlinkFreq_ByPPM+0x80>)
 8000d2a:	60fb      	str	r3, [r7, #12]
    if (freq < 2.0f) freq = 2.0f;
 8000d2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d30:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000d34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3c:	d502      	bpl.n	8000d44 <Get_BlinkFreq_ByPPM+0x6c>
 8000d3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d42:	60fb      	str	r3, [r7, #12]
    return freq;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	ee07 3a90 	vmov	s15, r3
}
 8000d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	41200000 	.word	0x41200000

08000d5c <main>:
extern volatile int sw1_flag;
extern volatile int sw2_flag;

char buff[128];

int main(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
    SystemState_t sysState = SYSTEM_RUNNING;
 8000d62:	2301      	movs	r3, #1
 8000d64:	75fb      	strb	r3, [r7, #23]
    float ppm = 0;
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
    int prev_sysState = SYSTEM_RUNNING; // lưu trạng thái trước đó
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]

    Delay_Init();
 8000d70:	f7ff fbdc 	bl	800052c <Delay_Init>
    MQ2_Init();
 8000d74:	f000 f898 	bl	8000ea8 <MQ2_Init>
    Button_Init();
 8000d78:	f7ff faca 	bl	8000310 <Button_Init>
    LED_Init();
 8000d7c:	f7ff fef4 	bl	8000b68 <LED_Init>
    LCD_Init();
 8000d80:	f7ff fe02 	bl	8000988 <LCD_Init>
    Buzzer_Init();
 8000d84:	f7ff fb9a 	bl	80004bc <Buzzer_Init>
    UART1_Init();
 8000d88:	f000 fa62 	bl	8001250 <UART1_Init>
    Relay_Init();
 8000d8c:	f000 f9b6 	bl	80010fc <Relay_Init>

    // Hiệu chuẩn cảm biến MQ2 trước khi vào vòng lặp chính
    LCD_Clear();
 8000d90:	f7ff fe26 	bl	80009e0 <LCD_Clear>
    LCD_SetCursor(0, 0);
 8000d94:	2100      	movs	r1, #0
 8000d96:	2000      	movs	r0, #0
 8000d98:	f7ff fe2c 	bl	80009f4 <LCD_SetCursor>
    LCD_Print("Dang hieu chuan");
 8000d9c:	483b      	ldr	r0, [pc, #236]	@ (8000e8c <main+0x130>)
 8000d9e:	f7ff fe4d 	bl	8000a3c <LCD_Print>
    LCD_SetCursor(1, 0);
 8000da2:	2100      	movs	r1, #0
 8000da4:	2001      	movs	r0, #1
 8000da6:	f7ff fe25 	bl	80009f4 <LCD_SetCursor>
    LCD_Print("Cam bien MQ-2...");
 8000daa:	4839      	ldr	r0, [pc, #228]	@ (8000e90 <main+0x134>)
 8000dac:	f7ff fe46 	bl	8000a3c <LCD_Print>

    float ro = MQ2_Calibrate();
 8000db0:	f000 f914 	bl	8000fdc <MQ2_Calibrate>
 8000db4:	ed87 0a02 	vstr	s0, [r7, #8]
    int ro_int = (int)ro;
 8000db8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dc0:	ee17 3a90 	vmov	r3, s15
 8000dc4:	607b      	str	r3, [r7, #4]
    LCD_Clear();
 8000dc6:	f7ff fe0b 	bl	80009e0 <LCD_Clear>
    LCD_SetCursor(0, 0);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff fe11 	bl	80009f4 <LCD_SetCursor>
    LCD_Print("Hieu chuan xong!");
 8000dd2:	4830      	ldr	r0, [pc, #192]	@ (8000e94 <main+0x138>)
 8000dd4:	f7ff fe32 	bl	8000a3c <LCD_Print>
    LCD_SetCursor(1, 0);
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff fe0a 	bl	80009f4 <LCD_SetCursor>
    snprintf(buff, sizeof(buff), "Ro=%d Ohm", ro_int);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a2d      	ldr	r2, [pc, #180]	@ (8000e98 <main+0x13c>)
 8000de4:	2180      	movs	r1, #128	@ 0x80
 8000de6:	482d      	ldr	r0, [pc, #180]	@ (8000e9c <main+0x140>)
 8000de8:	f000 fae2 	bl	80013b0 <sniprintf>
    LCD_Print(buff);
 8000dec:	482b      	ldr	r0, [pc, #172]	@ (8000e9c <main+0x140>)
 8000dee:	f7ff fe25 	bl	8000a3c <LCD_Print>
    Delay_ms(1500);
 8000df2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000df6:	f7ff fbc3 	bl	8000580 <Delay_ms>
    LCD_Clear();
 8000dfa:	f7ff fdf1 	bl	80009e0 <LCD_Clear>

    while (1) {
        // Xử lý chuyển đổi RUN/STOP
        if (sw1_flag) {
 8000dfe:	4b28      	ldr	r3, [pc, #160]	@ (8000ea0 <main+0x144>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d017      	beq.n	8000e36 <main+0xda>
            prev_sysState = sysState;
 8000e06:	7dfb      	ldrb	r3, [r7, #23]
 8000e08:	60fb      	str	r3, [r7, #12]
            sysState = (sysState == SYSTEM_RUNNING) ? SYSTEM_STOPPED : SYSTEM_RUNNING;
 8000e0a:	7dfb      	ldrb	r3, [r7, #23]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	bf14      	ite	ne
 8000e10:	2301      	movne	r3, #1
 8000e12:	2300      	moveq	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	75fb      	strb	r3, [r7, #23]
            sw1_flag = 0;
 8000e18:	4b21      	ldr	r3, [pc, #132]	@ (8000ea0 <main+0x144>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]

            // Nếu chuyển từ RUNNING sang STOPPED, cập nhật trạng thái lên LCD, giữ nguyên ppm cũ
            if (prev_sysState == SYSTEM_RUNNING && sysState == SYSTEM_STOPPED) {
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d108      	bne.n	8000e36 <main+0xda>
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d105      	bne.n	8000e36 <main+0xda>
                GasMonitor_UpdateState(sysState, ppm);
 8000e2a:	7dfb      	ldrb	r3, [r7, #23]
 8000e2c:	ed97 0a04 	vldr	s0, [r7, #16]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fbf1 	bl	8000618 <GasMonitor_UpdateState>
            }
            // Nếu chuyển từ STOPPED sang RUNNING, không cập nhật LCD tại đây (vòng lặp RUN sẽ update)
        }

        // Xử lý RESET: luôn về ppm=0, LCD báo "SAFE" (ppm=0), giữ nguyên trạng thái hệ thống
        if (sw2_flag) {
 8000e36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <main+0x148>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00b      	beq.n	8000e56 <main+0xfa>
            ppm = 0.0f;
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
            GasMonitor_UpdateState(sysState, ppm); // Hiển thị ppm=0, trạng thái safe
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	ed97 0a04 	vldr	s0, [r7, #16]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fbe4 	bl	8000618 <GasMonitor_UpdateState>
            sw2_flag = 0;
 8000e50:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <main+0x148>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
        }

        if (sysState == SYSTEM_RUNNING) {
 8000e56:	7dfb      	ldrb	r3, [r7, #23]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d113      	bne.n	8000e84 <main+0x128>
            uint16_t adc_raw = MQ2_ReadRaw();
 8000e5c:	f000 f864 	bl	8000f28 <MQ2_ReadRaw>
 8000e60:	4603      	mov	r3, r0
 8000e62:	807b      	strh	r3, [r7, #2]
            ppm = MQ2_Calculate_PPM(adc_raw);
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f8f4 	bl	8001054 <MQ2_Calculate_PPM>
 8000e6c:	ed87 0a04 	vstr	s0, [r7, #16]
            GasMonitor_UpdateState(sysState, ppm);
 8000e70:	7dfb      	ldrb	r3, [r7, #23]
 8000e72:	ed97 0a04 	vldr	s0, [r7, #16]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fbce 	bl	8000618 <GasMonitor_UpdateState>
            Delay_ms(100); // delay 100ms giữa các lần đọc
 8000e7c:	2064      	movs	r0, #100	@ 0x64
 8000e7e:	f7ff fb7f 	bl	8000580 <Delay_ms>
 8000e82:	e7bc      	b.n	8000dfe <main+0xa2>
        } else {
            // Ở STOPPED: Không cập nhật LCD liên tục, chỉ update khi chuyển trạng thái hoặc reset (xử lý ở trên)
            Delay_ms(100);
 8000e84:	2064      	movs	r0, #100	@ 0x64
 8000e86:	f7ff fb7b 	bl	8000580 <Delay_ms>
        if (sw1_flag) {
 8000e8a:	e7b8      	b.n	8000dfe <main+0xa2>
 8000e8c:	08002544 	.word	0x08002544
 8000e90:	08002554 	.word	0x08002554
 8000e94:	08002568 	.word	0x08002568
 8000e98:	0800257c 	.word	0x0800257c
 8000e9c:	20000090 	.word	0x20000090
 8000ea0:	2000007c 	.word	0x2000007c
 8000ea4:	20000080 	.word	0x20000080

08000ea8 <MQ2_Init>:
#define MQ2_PPM_A           574.25f
#define MQ2_PPM_B           -2.222

static float MQ2_Ro = 10.0f;     // Giá trị Ro, sẽ hiệu chuẩn

void MQ2_Init(void) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <MQ2_Init+0x74>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f1c <MQ2_Init+0x74>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <MQ2_Init+0x74>)
 8000eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebc:	4a17      	ldr	r2, [pc, #92]	@ (8000f1c <MQ2_Init+0x74>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec2:	6453      	str	r3, [r2, #68]	@ 0x44
    GPIOA->MODER |= (3 << (0 * 2));
 8000ec4:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <MQ2_Init+0x78>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a15      	ldr	r2, [pc, #84]	@ (8000f20 <MQ2_Init+0x78>)
 8000eca:	f043 0303 	orr.w	r3, r3, #3
 8000ece:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3 << (0 * 2));
 8000ed0:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <MQ2_Init+0x78>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <MQ2_Init+0x78>)
 8000ed6:	f023 0303 	bic.w	r3, r3, #3
 8000eda:	60d3      	str	r3, [r2, #12]
    ADC1->CR2 = 0;
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MQ2_Init+0x7c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
    ADC1->SQR1 = 0;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <MQ2_Init+0x7c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADC1->SQR3 = 0;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MQ2_Init+0x7c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SMPR2 &= ~(7 << 0);
 8000eee:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <MQ2_Init+0x7c>)
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8000f24 <MQ2_Init+0x7c>)
 8000ef4:	f023 0307 	bic.w	r3, r3, #7
 8000ef8:	6113      	str	r3, [r2, #16]
    ADC1->SMPR2 |= 5 << 0;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <MQ2_Init+0x7c>)
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	4a09      	ldr	r2, [pc, #36]	@ (8000f24 <MQ2_Init+0x7c>)
 8000f00:	f043 0305 	orr.w	r3, r3, #5
 8000f04:	6113      	str	r3, [r2, #16]
    ADC1->CR2 |= ADC_CR2_ADON;
 8000f06:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <MQ2_Init+0x7c>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <MQ2_Init+0x7c>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6093      	str	r3, [r2, #8]
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40012000 	.word	0x40012000

08000f28 <MQ2_ReadRaw>:

uint16_t MQ2_ReadRaw(void) {
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <MQ2_ReadRaw+0x30>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	4a09      	ldr	r2, [pc, #36]	@ (8000f58 <MQ2_ReadRaw+0x30>)
 8000f32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000f36:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC));
 8000f38:	bf00      	nop
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <MQ2_ReadRaw+0x30>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0f9      	beq.n	8000f3a <MQ2_ReadRaw+0x12>
    return ADC1->DR;
 8000f46:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <MQ2_ReadRaw+0x30>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4a:	b29b      	uxth	r3, r3
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40012000 	.word	0x40012000

08000f5c <MQ2_Calculate_Rs>:

static float MQ2_Calculate_Rs(uint16_t adc_val) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
    float v_adc = ((float)adc_val / 4095.0f) * 3.3f;
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f70:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8000fc8 <MQ2_Calculate_Rs+0x6c>
 8000f74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f78:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000fcc <MQ2_Calculate_Rs+0x70>
 8000f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f80:	edc7 7a03 	vstr	s15, [r7, #12]
    if (v_adc < 0.001f) v_adc = 0.001f;
 8000f84:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f88:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000fd0 <MQ2_Calculate_Rs+0x74>
 8000f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f94:	d501      	bpl.n	8000f9a <MQ2_Calculate_Rs+0x3e>
 8000f96:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MQ2_Calculate_Rs+0x78>)
 8000f98:	60fb      	str	r3, [r7, #12]
    return MQ2_RL_VALUE * (5.0f - v_adc) / v_adc;
 8000f9a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa6:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000fd8 <MQ2_Calculate_Rs+0x7c>
 8000faa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fae:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000fb6:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fba:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	457ff000 	.word	0x457ff000
 8000fcc:	40533333 	.word	0x40533333
 8000fd0:	3a83126f 	.word	0x3a83126f
 8000fd4:	3a83126f 	.word	0x3a83126f
 8000fd8:	447a0000 	.word	0x447a0000

08000fdc <MQ2_Calibrate>:

float MQ2_Calibrate(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
    float rs_sum = 0.0f;
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 50; i++) {
 8000fe8:	2300      	movs	r3, #0
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	e013      	b.n	8001016 <MQ2_Calibrate+0x3a>
        rs_sum += MQ2_Calculate_Rs(MQ2_ReadRaw());
 8000fee:	f7ff ff9b 	bl	8000f28 <MQ2_ReadRaw>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ffb1 	bl	8000f5c <MQ2_Calculate_Rs>
 8000ffa:	eeb0 7a40 	vmov.f32	s14, s0
 8000ffe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001002:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001006:	edc7 7a01 	vstr	s15, [r7, #4]
        Delay_ms(200);
 800100a:	20c8      	movs	r0, #200	@ 0xc8
 800100c:	f7ff fab8 	bl	8000580 <Delay_ms>
    for (int i = 0; i < 50; i++) {
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	2b31      	cmp	r3, #49	@ 0x31
 800101a:	dde8      	ble.n	8000fee <MQ2_Calibrate+0x12>
    }
    MQ2_Ro = rs_sum / 50.0f / MQ2_RO_CLEAN_AIR;
 800101c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001020:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001048 <MQ2_Calibrate+0x6c>
 8001024:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001028:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800104c <MQ2_Calibrate+0x70>
 800102c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001030:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <MQ2_Calibrate+0x74>)
 8001032:	edc3 7a00 	vstr	s15, [r3]
    return MQ2_Ro;
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MQ2_Calibrate+0x74>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	ee07 3a90 	vmov	s15, r3
}
 800103e:	eeb0 0a67 	vmov.f32	s0, s15
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	42480000 	.word	0x42480000
 800104c:	411ccccd 	.word	0x411ccccd
 8001050:	20000008 	.word	0x20000008

08001054 <MQ2_Calculate_PPM>:
        Delay_ms(10);
    }
    return rs_sum / 10.0f;
}

float MQ2_Calculate_PPM(uint16_t adc_val) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
    if (MQ2_Ro < 0.01f) return 0.0f;
 800105e:	4b23      	ldr	r3, [pc, #140]	@ (80010ec <MQ2_Calculate_PPM+0x98>)
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80010f0 <MQ2_Calculate_PPM+0x9c>
 8001068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	d502      	bpl.n	8001078 <MQ2_Calculate_PPM+0x24>
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	e031      	b.n	80010dc <MQ2_Calculate_PPM+0x88>
    float rs = MQ2_Calculate_Rs(adc_val);
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff6e 	bl	8000f5c <MQ2_Calculate_Rs>
 8001080:	ed87 0a05 	vstr	s0, [r7, #20]
    float ratio = rs / MQ2_Ro;
 8001084:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <MQ2_Calculate_PPM+0x98>)
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	edd7 6a05 	vldr	s13, [r7, #20]
 800108e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001092:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ratio <= 0.0f) return 0.0f;
 8001096:	edd7 7a04 	vldr	s15, [r7, #16]
 800109a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a2:	d802      	bhi.n	80010aa <MQ2_Calculate_PPM+0x56>
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	e018      	b.n	80010dc <MQ2_Calculate_PPM+0x88>
    float ppm = MQ2_PPM_A * powf(ratio, MQ2_PPM_B);
 80010aa:	eddf 0a12 	vldr	s1, [pc, #72]	@ 80010f4 <MQ2_Calculate_PPM+0xa0>
 80010ae:	ed97 0a04 	vldr	s0, [r7, #16]
 80010b2:	f000 fe49 	bl	8001d48 <powf>
 80010b6:	eef0 7a40 	vmov.f32	s15, s0
 80010ba:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80010f8 <MQ2_Calculate_PPM+0xa4>
 80010be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c2:	edc7 7a03 	vstr	s15, [r7, #12]
    return (ppm < 0.0f) ? 0.0f : ppm;
 80010c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d2:	d502      	bpl.n	80010da <MQ2_Calculate_PPM+0x86>
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	e000      	b.n	80010dc <MQ2_Calculate_PPM+0x88>
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eeb0 0a67 	vmov.f32	s0, s15
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008
 80010f0:	3c23d70a 	.word	0x3c23d70a
 80010f4:	c00e353f 	.word	0xc00e353f
 80010f8:	440f9000 	.word	0x440f9000

080010fc <Relay_Init>:
#include "relay.h"
#include "stm32f4xx.h"

void Relay_Init(void) {
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <Relay_Init+0x28>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001104:	4a07      	ldr	r2, [pc, #28]	@ (8001124 <Relay_Init+0x28>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER |= (1 << (12 * 2));
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <Relay_Init+0x2c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <Relay_Init+0x2c>)
 8001112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40020400 	.word	0x40020400

0800112c <Relay_On>:

void Relay_On(void) {
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
    GPIOB->ODR |= (1 << 12);
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <Relay_On+0x1c>)
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <Relay_On+0x1c>)
 8001136:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800113a:	6153      	str	r3, [r2, #20]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40020400 	.word	0x40020400

0800114c <Relay_Off>:

void Relay_Off(void) {
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
    GPIOB->ODR &= ~(1 << 12);
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <Relay_Off+0x1c>)
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <Relay_Off+0x1c>)
 8001156:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800115a:	6153      	str	r3, [r2, #20]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40020400 	.word	0x40020400

0800116c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <NMI_Handler+0x4>

08001174 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <MemManage_Handler+0x4>

08001184 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <UsageFault_Handler+0x4>

08001194 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c8:	4a14      	ldr	r2, [pc, #80]	@ (800121c <_sbrk+0x5c>)
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <_sbrk+0x60>)
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d4:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <_sbrk+0x64>)
 80011de:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <_sbrk+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d207      	bcs.n	8001200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f0:	f000 f932 	bl	8001458 <__errno>
 80011f4:	4603      	mov	r3, r0
 80011f6:	220c      	movs	r2, #12
 80011f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	e009      	b.n	8001214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001200:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	4a05      	ldr	r2, [pc, #20]	@ (8001224 <_sbrk+0x64>)
 8001210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20018000 	.word	0x20018000
 8001220:	00000400 	.word	0x00000400
 8001224:	20000110 	.word	0x20000110
 8001228:	20000260 	.word	0x20000260

0800122c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <SystemInit+0x20>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001236:	4a05      	ldr	r2, [pc, #20]	@ (800124c <SystemInit+0x20>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <UART1_Init>:
#include "stm32f4xx.h"
#include "uart.h"
#include <stdio.h>

void UART1_Init(void) {
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
    // Bật clock GPIOA và USART1
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <UART1_Init+0x68>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001258:	4a17      	ldr	r2, [pc, #92]	@ (80012b8 <UART1_Init+0x68>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <UART1_Init+0x68>)
 8001262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001264:	4a14      	ldr	r2, [pc, #80]	@ (80012b8 <UART1_Init+0x68>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	6453      	str	r3, [r2, #68]	@ 0x44

    // PA9 (TX), PA10 (RX): Alternate function
    GPIOA->MODER &= ~((3 << (2 * 9)) | (3 << (2 * 10)));
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <UART1_Init+0x6c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a12      	ldr	r2, [pc, #72]	@ (80012bc <UART1_Init+0x6c>)
 8001272:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8001276:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << (2 * 9)) | (2 << (2 * 10)); // AF mode
 8001278:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <UART1_Init+0x6c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0f      	ldr	r2, [pc, #60]	@ (80012bc <UART1_Init+0x6c>)
 800127e:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8001282:	6013      	str	r3, [r2, #0]

    // AF7 cho USART1 trên PA9, PA10
    GPIOA->AFR[1] &= ~((0xF << (4 * (9 - 8))) | (0xF << (4 * (10 - 8))));
 8001284:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <UART1_Init+0x6c>)
 8001286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001288:	4a0c      	ldr	r2, [pc, #48]	@ (80012bc <UART1_Init+0x6c>)
 800128a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800128e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |= (7 << (4 * (9 - 8))) | (7 << (4 * (10 - 8)));
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <UART1_Init+0x6c>)
 8001292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001294:	4a09      	ldr	r2, [pc, #36]	@ (80012bc <UART1_Init+0x6c>)
 8001296:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 800129a:	6253      	str	r3, [r2, #36]	@ 0x24

    // Baudrate 115200, giả sử APB2 clock là 84MHz (theo CubeMX mặc định cho F401RE)
    USART1->BRR = (uint32_t)(16000000 / 9600);
 800129c:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <UART1_Init+0x70>)
 800129e:	f240 6282 	movw	r2, #1666	@ 0x682
 80012a2:	609a      	str	r2, [r3, #8]

    USART1->CR1 = USART_CR1_TE | USART_CR1_UE; // Enable TX, USART
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <UART1_Init+0x70>)
 80012a6:	f242 0208 	movw	r2, #8200	@ 0x2008
 80012aa:	60da      	str	r2, [r3, #12]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40011000 	.word	0x40011000

080012c4 <UART1_SendChar>:

void UART1_SendChar(char c) {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE));
 80012ce:	bf00      	nop
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <UART1_SendChar+0x2c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f9      	beq.n	80012d0 <UART1_SendChar+0xc>
    USART1->DR = c;
 80012dc:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <UART1_SendChar+0x2c>)
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	6053      	str	r3, [r2, #4]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40011000 	.word	0x40011000

080012f4 <UART1_SendString>:

void UART1_SendString(const char* str) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    while (*str) {
 80012fc:	e006      	b.n	800130c <UART1_SendString+0x18>
        UART1_SendChar(*str++);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ffdc 	bl	80012c4 <UART1_SendChar>
    while (*str) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f4      	bne.n	80012fe <UART1_SendString+0xa>
    }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <Send_Alert_ToESP>:

// Gửi thông báo ALERT lên ESP32
void Send_Alert_ToESP(float ppm) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b094      	sub	sp, #80	@ 0x50
 8001324:	af00      	add	r7, sp, #0
 8001326:	ed87 0a01 	vstr	s0, [r7, #4]
    char buff[64];
    int ppm_int = (int)ppm;
 800132a:	edd7 7a01 	vldr	s15, [r7, #4]
 800132e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001332:	ee17 3a90 	vmov	r3, s15
 8001336:	64fb      	str	r3, [r7, #76]	@ 0x4c
    snprintf(buff, sizeof(buff), "ALERT! PPM=%d\n", ppm_int); // Chỉ dùng '\n' (ESP32 nhận đến ký tự này mới publish)
 8001338:	f107 000c 	add.w	r0, r7, #12
 800133c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800133e:	4a06      	ldr	r2, [pc, #24]	@ (8001358 <Send_Alert_ToESP+0x38>)
 8001340:	2140      	movs	r1, #64	@ 0x40
 8001342:	f000 f835 	bl	80013b0 <sniprintf>
    UART1_SendString(buff);
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ffd2 	bl	80012f4 <UART1_SendString>
}
 8001350:	bf00      	nop
 8001352:	3750      	adds	r7, #80	@ 0x50
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	08002588 	.word	0x08002588

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001394 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001360:	f7ff ff64 	bl	800122c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001364:	480c      	ldr	r0, [pc, #48]	@ (8001398 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001366:	490d      	ldr	r1, [pc, #52]	@ (800139c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001368:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800137c:	4c0a      	ldr	r4, [pc, #40]	@ (80013a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800138a:	f000 f86b 	bl	8001464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff fce5 	bl	8000d5c <main>
  bx  lr    
 8001392:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001394:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80013a0:	080025f4 	.word	0x080025f4
  ldr r2, =_sbss
 80013a4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80013a8:	2000025c 	.word	0x2000025c

080013ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC_IRQHandler>
	...

080013b0 <sniprintf>:
 80013b0:	b40c      	push	{r2, r3}
 80013b2:	b530      	push	{r4, r5, lr}
 80013b4:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <sniprintf+0x64>)
 80013b6:	1e0c      	subs	r4, r1, #0
 80013b8:	681d      	ldr	r5, [r3, #0]
 80013ba:	b09d      	sub	sp, #116	@ 0x74
 80013bc:	da08      	bge.n	80013d0 <sniprintf+0x20>
 80013be:	238b      	movs	r3, #139	@ 0x8b
 80013c0:	602b      	str	r3, [r5, #0]
 80013c2:	f04f 30ff 	mov.w	r0, #4294967295
 80013c6:	b01d      	add	sp, #116	@ 0x74
 80013c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80013cc:	b002      	add	sp, #8
 80013ce:	4770      	bx	lr
 80013d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80013d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80013d8:	bf14      	ite	ne
 80013da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80013de:	4623      	moveq	r3, r4
 80013e0:	9304      	str	r3, [sp, #16]
 80013e2:	9307      	str	r3, [sp, #28]
 80013e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013e8:	9002      	str	r0, [sp, #8]
 80013ea:	9006      	str	r0, [sp, #24]
 80013ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80013f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80013f2:	ab21      	add	r3, sp, #132	@ 0x84
 80013f4:	a902      	add	r1, sp, #8
 80013f6:	4628      	mov	r0, r5
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	f000 f9ad 	bl	8001758 <_svfiprintf_r>
 80013fe:	1c43      	adds	r3, r0, #1
 8001400:	bfbc      	itt	lt
 8001402:	238b      	movlt	r3, #139	@ 0x8b
 8001404:	602b      	strlt	r3, [r5, #0]
 8001406:	2c00      	cmp	r4, #0
 8001408:	d0dd      	beq.n	80013c6 <sniprintf+0x16>
 800140a:	9b02      	ldr	r3, [sp, #8]
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	e7d9      	b.n	80013c6 <sniprintf+0x16>
 8001412:	bf00      	nop
 8001414:	20000010 	.word	0x20000010

08001418 <siprintf>:
 8001418:	b40e      	push	{r1, r2, r3}
 800141a:	b500      	push	{lr}
 800141c:	b09c      	sub	sp, #112	@ 0x70
 800141e:	ab1d      	add	r3, sp, #116	@ 0x74
 8001420:	9002      	str	r0, [sp, #8]
 8001422:	9006      	str	r0, [sp, #24]
 8001424:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001428:	4809      	ldr	r0, [pc, #36]	@ (8001450 <siprintf+0x38>)
 800142a:	9107      	str	r1, [sp, #28]
 800142c:	9104      	str	r1, [sp, #16]
 800142e:	4909      	ldr	r1, [pc, #36]	@ (8001454 <siprintf+0x3c>)
 8001430:	f853 2b04 	ldr.w	r2, [r3], #4
 8001434:	9105      	str	r1, [sp, #20]
 8001436:	6800      	ldr	r0, [r0, #0]
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	a902      	add	r1, sp, #8
 800143c:	f000 f98c 	bl	8001758 <_svfiprintf_r>
 8001440:	9b02      	ldr	r3, [sp, #8]
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	b01c      	add	sp, #112	@ 0x70
 8001448:	f85d eb04 	ldr.w	lr, [sp], #4
 800144c:	b003      	add	sp, #12
 800144e:	4770      	bx	lr
 8001450:	20000010 	.word	0x20000010
 8001454:	ffff0208 	.word	0xffff0208

08001458 <__errno>:
 8001458:	4b01      	ldr	r3, [pc, #4]	@ (8001460 <__errno+0x8>)
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000010 	.word	0x20000010

08001464 <__libc_init_array>:
 8001464:	b570      	push	{r4, r5, r6, lr}
 8001466:	4d0d      	ldr	r5, [pc, #52]	@ (800149c <__libc_init_array+0x38>)
 8001468:	4c0d      	ldr	r4, [pc, #52]	@ (80014a0 <__libc_init_array+0x3c>)
 800146a:	1b64      	subs	r4, r4, r5
 800146c:	10a4      	asrs	r4, r4, #2
 800146e:	2600      	movs	r6, #0
 8001470:	42a6      	cmp	r6, r4
 8001472:	d109      	bne.n	8001488 <__libc_init_array+0x24>
 8001474:	4d0b      	ldr	r5, [pc, #44]	@ (80014a4 <__libc_init_array+0x40>)
 8001476:	4c0c      	ldr	r4, [pc, #48]	@ (80014a8 <__libc_init_array+0x44>)
 8001478:	f001 f830 	bl	80024dc <_init>
 800147c:	1b64      	subs	r4, r4, r5
 800147e:	10a4      	asrs	r4, r4, #2
 8001480:	2600      	movs	r6, #0
 8001482:	42a6      	cmp	r6, r4
 8001484:	d105      	bne.n	8001492 <__libc_init_array+0x2e>
 8001486:	bd70      	pop	{r4, r5, r6, pc}
 8001488:	f855 3b04 	ldr.w	r3, [r5], #4
 800148c:	4798      	blx	r3
 800148e:	3601      	adds	r6, #1
 8001490:	e7ee      	b.n	8001470 <__libc_init_array+0xc>
 8001492:	f855 3b04 	ldr.w	r3, [r5], #4
 8001496:	4798      	blx	r3
 8001498:	3601      	adds	r6, #1
 800149a:	e7f2      	b.n	8001482 <__libc_init_array+0x1e>
 800149c:	080025ec 	.word	0x080025ec
 80014a0:	080025ec 	.word	0x080025ec
 80014a4:	080025ec 	.word	0x080025ec
 80014a8:	080025f0 	.word	0x080025f0

080014ac <__retarget_lock_acquire_recursive>:
 80014ac:	4770      	bx	lr

080014ae <__retarget_lock_release_recursive>:
 80014ae:	4770      	bx	lr

080014b0 <_free_r>:
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	4605      	mov	r5, r0
 80014b4:	2900      	cmp	r1, #0
 80014b6:	d041      	beq.n	800153c <_free_r+0x8c>
 80014b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014bc:	1f0c      	subs	r4, r1, #4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	bfb8      	it	lt
 80014c2:	18e4      	addlt	r4, r4, r3
 80014c4:	f000 f8e0 	bl	8001688 <__malloc_lock>
 80014c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001540 <_free_r+0x90>)
 80014ca:	6813      	ldr	r3, [r2, #0]
 80014cc:	b933      	cbnz	r3, 80014dc <_free_r+0x2c>
 80014ce:	6063      	str	r3, [r4, #4]
 80014d0:	6014      	str	r4, [r2, #0]
 80014d2:	4628      	mov	r0, r5
 80014d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014d8:	f000 b8dc 	b.w	8001694 <__malloc_unlock>
 80014dc:	42a3      	cmp	r3, r4
 80014de:	d908      	bls.n	80014f2 <_free_r+0x42>
 80014e0:	6820      	ldr	r0, [r4, #0]
 80014e2:	1821      	adds	r1, r4, r0
 80014e4:	428b      	cmp	r3, r1
 80014e6:	bf01      	itttt	eq
 80014e8:	6819      	ldreq	r1, [r3, #0]
 80014ea:	685b      	ldreq	r3, [r3, #4]
 80014ec:	1809      	addeq	r1, r1, r0
 80014ee:	6021      	streq	r1, [r4, #0]
 80014f0:	e7ed      	b.n	80014ce <_free_r+0x1e>
 80014f2:	461a      	mov	r2, r3
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	b10b      	cbz	r3, 80014fc <_free_r+0x4c>
 80014f8:	42a3      	cmp	r3, r4
 80014fa:	d9fa      	bls.n	80014f2 <_free_r+0x42>
 80014fc:	6811      	ldr	r1, [r2, #0]
 80014fe:	1850      	adds	r0, r2, r1
 8001500:	42a0      	cmp	r0, r4
 8001502:	d10b      	bne.n	800151c <_free_r+0x6c>
 8001504:	6820      	ldr	r0, [r4, #0]
 8001506:	4401      	add	r1, r0
 8001508:	1850      	adds	r0, r2, r1
 800150a:	4283      	cmp	r3, r0
 800150c:	6011      	str	r1, [r2, #0]
 800150e:	d1e0      	bne.n	80014d2 <_free_r+0x22>
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	6053      	str	r3, [r2, #4]
 8001516:	4408      	add	r0, r1
 8001518:	6010      	str	r0, [r2, #0]
 800151a:	e7da      	b.n	80014d2 <_free_r+0x22>
 800151c:	d902      	bls.n	8001524 <_free_r+0x74>
 800151e:	230c      	movs	r3, #12
 8001520:	602b      	str	r3, [r5, #0]
 8001522:	e7d6      	b.n	80014d2 <_free_r+0x22>
 8001524:	6820      	ldr	r0, [r4, #0]
 8001526:	1821      	adds	r1, r4, r0
 8001528:	428b      	cmp	r3, r1
 800152a:	bf04      	itt	eq
 800152c:	6819      	ldreq	r1, [r3, #0]
 800152e:	685b      	ldreq	r3, [r3, #4]
 8001530:	6063      	str	r3, [r4, #4]
 8001532:	bf04      	itt	eq
 8001534:	1809      	addeq	r1, r1, r0
 8001536:	6021      	streq	r1, [r4, #0]
 8001538:	6054      	str	r4, [r2, #4]
 800153a:	e7ca      	b.n	80014d2 <_free_r+0x22>
 800153c:	bd38      	pop	{r3, r4, r5, pc}
 800153e:	bf00      	nop
 8001540:	20000258 	.word	0x20000258

08001544 <sbrk_aligned>:
 8001544:	b570      	push	{r4, r5, r6, lr}
 8001546:	4e0f      	ldr	r6, [pc, #60]	@ (8001584 <sbrk_aligned+0x40>)
 8001548:	460c      	mov	r4, r1
 800154a:	6831      	ldr	r1, [r6, #0]
 800154c:	4605      	mov	r5, r0
 800154e:	b911      	cbnz	r1, 8001556 <sbrk_aligned+0x12>
 8001550:	f000 fba6 	bl	8001ca0 <_sbrk_r>
 8001554:	6030      	str	r0, [r6, #0]
 8001556:	4621      	mov	r1, r4
 8001558:	4628      	mov	r0, r5
 800155a:	f000 fba1 	bl	8001ca0 <_sbrk_r>
 800155e:	1c43      	adds	r3, r0, #1
 8001560:	d103      	bne.n	800156a <sbrk_aligned+0x26>
 8001562:	f04f 34ff 	mov.w	r4, #4294967295
 8001566:	4620      	mov	r0, r4
 8001568:	bd70      	pop	{r4, r5, r6, pc}
 800156a:	1cc4      	adds	r4, r0, #3
 800156c:	f024 0403 	bic.w	r4, r4, #3
 8001570:	42a0      	cmp	r0, r4
 8001572:	d0f8      	beq.n	8001566 <sbrk_aligned+0x22>
 8001574:	1a21      	subs	r1, r4, r0
 8001576:	4628      	mov	r0, r5
 8001578:	f000 fb92 	bl	8001ca0 <_sbrk_r>
 800157c:	3001      	adds	r0, #1
 800157e:	d1f2      	bne.n	8001566 <sbrk_aligned+0x22>
 8001580:	e7ef      	b.n	8001562 <sbrk_aligned+0x1e>
 8001582:	bf00      	nop
 8001584:	20000254 	.word	0x20000254

08001588 <_malloc_r>:
 8001588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800158c:	1ccd      	adds	r5, r1, #3
 800158e:	f025 0503 	bic.w	r5, r5, #3
 8001592:	3508      	adds	r5, #8
 8001594:	2d0c      	cmp	r5, #12
 8001596:	bf38      	it	cc
 8001598:	250c      	movcc	r5, #12
 800159a:	2d00      	cmp	r5, #0
 800159c:	4606      	mov	r6, r0
 800159e:	db01      	blt.n	80015a4 <_malloc_r+0x1c>
 80015a0:	42a9      	cmp	r1, r5
 80015a2:	d904      	bls.n	80015ae <_malloc_r+0x26>
 80015a4:	230c      	movs	r3, #12
 80015a6:	6033      	str	r3, [r6, #0]
 80015a8:	2000      	movs	r0, #0
 80015aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001684 <_malloc_r+0xfc>
 80015b2:	f000 f869 	bl	8001688 <__malloc_lock>
 80015b6:	f8d8 3000 	ldr.w	r3, [r8]
 80015ba:	461c      	mov	r4, r3
 80015bc:	bb44      	cbnz	r4, 8001610 <_malloc_r+0x88>
 80015be:	4629      	mov	r1, r5
 80015c0:	4630      	mov	r0, r6
 80015c2:	f7ff ffbf 	bl	8001544 <sbrk_aligned>
 80015c6:	1c43      	adds	r3, r0, #1
 80015c8:	4604      	mov	r4, r0
 80015ca:	d158      	bne.n	800167e <_malloc_r+0xf6>
 80015cc:	f8d8 4000 	ldr.w	r4, [r8]
 80015d0:	4627      	mov	r7, r4
 80015d2:	2f00      	cmp	r7, #0
 80015d4:	d143      	bne.n	800165e <_malloc_r+0xd6>
 80015d6:	2c00      	cmp	r4, #0
 80015d8:	d04b      	beq.n	8001672 <_malloc_r+0xea>
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	4639      	mov	r1, r7
 80015de:	4630      	mov	r0, r6
 80015e0:	eb04 0903 	add.w	r9, r4, r3
 80015e4:	f000 fb5c 	bl	8001ca0 <_sbrk_r>
 80015e8:	4581      	cmp	r9, r0
 80015ea:	d142      	bne.n	8001672 <_malloc_r+0xea>
 80015ec:	6821      	ldr	r1, [r4, #0]
 80015ee:	1a6d      	subs	r5, r5, r1
 80015f0:	4629      	mov	r1, r5
 80015f2:	4630      	mov	r0, r6
 80015f4:	f7ff ffa6 	bl	8001544 <sbrk_aligned>
 80015f8:	3001      	adds	r0, #1
 80015fa:	d03a      	beq.n	8001672 <_malloc_r+0xea>
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	442b      	add	r3, r5
 8001600:	6023      	str	r3, [r4, #0]
 8001602:	f8d8 3000 	ldr.w	r3, [r8]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	bb62      	cbnz	r2, 8001664 <_malloc_r+0xdc>
 800160a:	f8c8 7000 	str.w	r7, [r8]
 800160e:	e00f      	b.n	8001630 <_malloc_r+0xa8>
 8001610:	6822      	ldr	r2, [r4, #0]
 8001612:	1b52      	subs	r2, r2, r5
 8001614:	d420      	bmi.n	8001658 <_malloc_r+0xd0>
 8001616:	2a0b      	cmp	r2, #11
 8001618:	d917      	bls.n	800164a <_malloc_r+0xc2>
 800161a:	1961      	adds	r1, r4, r5
 800161c:	42a3      	cmp	r3, r4
 800161e:	6025      	str	r5, [r4, #0]
 8001620:	bf18      	it	ne
 8001622:	6059      	strne	r1, [r3, #4]
 8001624:	6863      	ldr	r3, [r4, #4]
 8001626:	bf08      	it	eq
 8001628:	f8c8 1000 	streq.w	r1, [r8]
 800162c:	5162      	str	r2, [r4, r5]
 800162e:	604b      	str	r3, [r1, #4]
 8001630:	4630      	mov	r0, r6
 8001632:	f000 f82f 	bl	8001694 <__malloc_unlock>
 8001636:	f104 000b 	add.w	r0, r4, #11
 800163a:	1d23      	adds	r3, r4, #4
 800163c:	f020 0007 	bic.w	r0, r0, #7
 8001640:	1ac2      	subs	r2, r0, r3
 8001642:	bf1c      	itt	ne
 8001644:	1a1b      	subne	r3, r3, r0
 8001646:	50a3      	strne	r3, [r4, r2]
 8001648:	e7af      	b.n	80015aa <_malloc_r+0x22>
 800164a:	6862      	ldr	r2, [r4, #4]
 800164c:	42a3      	cmp	r3, r4
 800164e:	bf0c      	ite	eq
 8001650:	f8c8 2000 	streq.w	r2, [r8]
 8001654:	605a      	strne	r2, [r3, #4]
 8001656:	e7eb      	b.n	8001630 <_malloc_r+0xa8>
 8001658:	4623      	mov	r3, r4
 800165a:	6864      	ldr	r4, [r4, #4]
 800165c:	e7ae      	b.n	80015bc <_malloc_r+0x34>
 800165e:	463c      	mov	r4, r7
 8001660:	687f      	ldr	r7, [r7, #4]
 8001662:	e7b6      	b.n	80015d2 <_malloc_r+0x4a>
 8001664:	461a      	mov	r2, r3
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	42a3      	cmp	r3, r4
 800166a:	d1fb      	bne.n	8001664 <_malloc_r+0xdc>
 800166c:	2300      	movs	r3, #0
 800166e:	6053      	str	r3, [r2, #4]
 8001670:	e7de      	b.n	8001630 <_malloc_r+0xa8>
 8001672:	230c      	movs	r3, #12
 8001674:	6033      	str	r3, [r6, #0]
 8001676:	4630      	mov	r0, r6
 8001678:	f000 f80c 	bl	8001694 <__malloc_unlock>
 800167c:	e794      	b.n	80015a8 <_malloc_r+0x20>
 800167e:	6005      	str	r5, [r0, #0]
 8001680:	e7d6      	b.n	8001630 <_malloc_r+0xa8>
 8001682:	bf00      	nop
 8001684:	20000258 	.word	0x20000258

08001688 <__malloc_lock>:
 8001688:	4801      	ldr	r0, [pc, #4]	@ (8001690 <__malloc_lock+0x8>)
 800168a:	f7ff bf0f 	b.w	80014ac <__retarget_lock_acquire_recursive>
 800168e:	bf00      	nop
 8001690:	20000250 	.word	0x20000250

08001694 <__malloc_unlock>:
 8001694:	4801      	ldr	r0, [pc, #4]	@ (800169c <__malloc_unlock+0x8>)
 8001696:	f7ff bf0a 	b.w	80014ae <__retarget_lock_release_recursive>
 800169a:	bf00      	nop
 800169c:	20000250 	.word	0x20000250

080016a0 <__ssputs_r>:
 80016a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016a4:	688e      	ldr	r6, [r1, #8]
 80016a6:	461f      	mov	r7, r3
 80016a8:	42be      	cmp	r6, r7
 80016aa:	680b      	ldr	r3, [r1, #0]
 80016ac:	4682      	mov	sl, r0
 80016ae:	460c      	mov	r4, r1
 80016b0:	4690      	mov	r8, r2
 80016b2:	d82d      	bhi.n	8001710 <__ssputs_r+0x70>
 80016b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80016b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80016bc:	d026      	beq.n	800170c <__ssputs_r+0x6c>
 80016be:	6965      	ldr	r5, [r4, #20]
 80016c0:	6909      	ldr	r1, [r1, #16]
 80016c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80016c6:	eba3 0901 	sub.w	r9, r3, r1
 80016ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80016ce:	1c7b      	adds	r3, r7, #1
 80016d0:	444b      	add	r3, r9
 80016d2:	106d      	asrs	r5, r5, #1
 80016d4:	429d      	cmp	r5, r3
 80016d6:	bf38      	it	cc
 80016d8:	461d      	movcc	r5, r3
 80016da:	0553      	lsls	r3, r2, #21
 80016dc:	d527      	bpl.n	800172e <__ssputs_r+0x8e>
 80016de:	4629      	mov	r1, r5
 80016e0:	f7ff ff52 	bl	8001588 <_malloc_r>
 80016e4:	4606      	mov	r6, r0
 80016e6:	b360      	cbz	r0, 8001742 <__ssputs_r+0xa2>
 80016e8:	6921      	ldr	r1, [r4, #16]
 80016ea:	464a      	mov	r2, r9
 80016ec:	f000 fae8 	bl	8001cc0 <memcpy>
 80016f0:	89a3      	ldrh	r3, [r4, #12]
 80016f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80016f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016fa:	81a3      	strh	r3, [r4, #12]
 80016fc:	6126      	str	r6, [r4, #16]
 80016fe:	6165      	str	r5, [r4, #20]
 8001700:	444e      	add	r6, r9
 8001702:	eba5 0509 	sub.w	r5, r5, r9
 8001706:	6026      	str	r6, [r4, #0]
 8001708:	60a5      	str	r5, [r4, #8]
 800170a:	463e      	mov	r6, r7
 800170c:	42be      	cmp	r6, r7
 800170e:	d900      	bls.n	8001712 <__ssputs_r+0x72>
 8001710:	463e      	mov	r6, r7
 8001712:	6820      	ldr	r0, [r4, #0]
 8001714:	4632      	mov	r2, r6
 8001716:	4641      	mov	r1, r8
 8001718:	f000 faa8 	bl	8001c6c <memmove>
 800171c:	68a3      	ldr	r3, [r4, #8]
 800171e:	1b9b      	subs	r3, r3, r6
 8001720:	60a3      	str	r3, [r4, #8]
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	4433      	add	r3, r6
 8001726:	6023      	str	r3, [r4, #0]
 8001728:	2000      	movs	r0, #0
 800172a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800172e:	462a      	mov	r2, r5
 8001730:	f000 fad4 	bl	8001cdc <_realloc_r>
 8001734:	4606      	mov	r6, r0
 8001736:	2800      	cmp	r0, #0
 8001738:	d1e0      	bne.n	80016fc <__ssputs_r+0x5c>
 800173a:	6921      	ldr	r1, [r4, #16]
 800173c:	4650      	mov	r0, sl
 800173e:	f7ff feb7 	bl	80014b0 <_free_r>
 8001742:	230c      	movs	r3, #12
 8001744:	f8ca 3000 	str.w	r3, [sl]
 8001748:	89a3      	ldrh	r3, [r4, #12]
 800174a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800174e:	81a3      	strh	r3, [r4, #12]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	e7e9      	b.n	800172a <__ssputs_r+0x8a>
	...

08001758 <_svfiprintf_r>:
 8001758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800175c:	4698      	mov	r8, r3
 800175e:	898b      	ldrh	r3, [r1, #12]
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	b09d      	sub	sp, #116	@ 0x74
 8001764:	4607      	mov	r7, r0
 8001766:	460d      	mov	r5, r1
 8001768:	4614      	mov	r4, r2
 800176a:	d510      	bpl.n	800178e <_svfiprintf_r+0x36>
 800176c:	690b      	ldr	r3, [r1, #16]
 800176e:	b973      	cbnz	r3, 800178e <_svfiprintf_r+0x36>
 8001770:	2140      	movs	r1, #64	@ 0x40
 8001772:	f7ff ff09 	bl	8001588 <_malloc_r>
 8001776:	6028      	str	r0, [r5, #0]
 8001778:	6128      	str	r0, [r5, #16]
 800177a:	b930      	cbnz	r0, 800178a <_svfiprintf_r+0x32>
 800177c:	230c      	movs	r3, #12
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	b01d      	add	sp, #116	@ 0x74
 8001786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800178a:	2340      	movs	r3, #64	@ 0x40
 800178c:	616b      	str	r3, [r5, #20]
 800178e:	2300      	movs	r3, #0
 8001790:	9309      	str	r3, [sp, #36]	@ 0x24
 8001792:	2320      	movs	r3, #32
 8001794:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001798:	f8cd 800c 	str.w	r8, [sp, #12]
 800179c:	2330      	movs	r3, #48	@ 0x30
 800179e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800193c <_svfiprintf_r+0x1e4>
 80017a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80017a6:	f04f 0901 	mov.w	r9, #1
 80017aa:	4623      	mov	r3, r4
 80017ac:	469a      	mov	sl, r3
 80017ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017b2:	b10a      	cbz	r2, 80017b8 <_svfiprintf_r+0x60>
 80017b4:	2a25      	cmp	r2, #37	@ 0x25
 80017b6:	d1f9      	bne.n	80017ac <_svfiprintf_r+0x54>
 80017b8:	ebba 0b04 	subs.w	fp, sl, r4
 80017bc:	d00b      	beq.n	80017d6 <_svfiprintf_r+0x7e>
 80017be:	465b      	mov	r3, fp
 80017c0:	4622      	mov	r2, r4
 80017c2:	4629      	mov	r1, r5
 80017c4:	4638      	mov	r0, r7
 80017c6:	f7ff ff6b 	bl	80016a0 <__ssputs_r>
 80017ca:	3001      	adds	r0, #1
 80017cc:	f000 80a7 	beq.w	800191e <_svfiprintf_r+0x1c6>
 80017d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80017d2:	445a      	add	r2, fp
 80017d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80017d6:	f89a 3000 	ldrb.w	r3, [sl]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 809f 	beq.w	800191e <_svfiprintf_r+0x1c6>
 80017e0:	2300      	movs	r3, #0
 80017e2:	f04f 32ff 	mov.w	r2, #4294967295
 80017e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017ea:	f10a 0a01 	add.w	sl, sl, #1
 80017ee:	9304      	str	r3, [sp, #16]
 80017f0:	9307      	str	r3, [sp, #28]
 80017f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80017f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80017f8:	4654      	mov	r4, sl
 80017fa:	2205      	movs	r2, #5
 80017fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001800:	484e      	ldr	r0, [pc, #312]	@ (800193c <_svfiprintf_r+0x1e4>)
 8001802:	f7fe fced 	bl	80001e0 <memchr>
 8001806:	9a04      	ldr	r2, [sp, #16]
 8001808:	b9d8      	cbnz	r0, 8001842 <_svfiprintf_r+0xea>
 800180a:	06d0      	lsls	r0, r2, #27
 800180c:	bf44      	itt	mi
 800180e:	2320      	movmi	r3, #32
 8001810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001814:	0711      	lsls	r1, r2, #28
 8001816:	bf44      	itt	mi
 8001818:	232b      	movmi	r3, #43	@ 0x2b
 800181a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800181e:	f89a 3000 	ldrb.w	r3, [sl]
 8001822:	2b2a      	cmp	r3, #42	@ 0x2a
 8001824:	d015      	beq.n	8001852 <_svfiprintf_r+0xfa>
 8001826:	9a07      	ldr	r2, [sp, #28]
 8001828:	4654      	mov	r4, sl
 800182a:	2000      	movs	r0, #0
 800182c:	f04f 0c0a 	mov.w	ip, #10
 8001830:	4621      	mov	r1, r4
 8001832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001836:	3b30      	subs	r3, #48	@ 0x30
 8001838:	2b09      	cmp	r3, #9
 800183a:	d94b      	bls.n	80018d4 <_svfiprintf_r+0x17c>
 800183c:	b1b0      	cbz	r0, 800186c <_svfiprintf_r+0x114>
 800183e:	9207      	str	r2, [sp, #28]
 8001840:	e014      	b.n	800186c <_svfiprintf_r+0x114>
 8001842:	eba0 0308 	sub.w	r3, r0, r8
 8001846:	fa09 f303 	lsl.w	r3, r9, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	9304      	str	r3, [sp, #16]
 800184e:	46a2      	mov	sl, r4
 8001850:	e7d2      	b.n	80017f8 <_svfiprintf_r+0xa0>
 8001852:	9b03      	ldr	r3, [sp, #12]
 8001854:	1d19      	adds	r1, r3, #4
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	9103      	str	r1, [sp, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	bfbb      	ittet	lt
 800185e:	425b      	neglt	r3, r3
 8001860:	f042 0202 	orrlt.w	r2, r2, #2
 8001864:	9307      	strge	r3, [sp, #28]
 8001866:	9307      	strlt	r3, [sp, #28]
 8001868:	bfb8      	it	lt
 800186a:	9204      	strlt	r2, [sp, #16]
 800186c:	7823      	ldrb	r3, [r4, #0]
 800186e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001870:	d10a      	bne.n	8001888 <_svfiprintf_r+0x130>
 8001872:	7863      	ldrb	r3, [r4, #1]
 8001874:	2b2a      	cmp	r3, #42	@ 0x2a
 8001876:	d132      	bne.n	80018de <_svfiprintf_r+0x186>
 8001878:	9b03      	ldr	r3, [sp, #12]
 800187a:	1d1a      	adds	r2, r3, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	9203      	str	r2, [sp, #12]
 8001880:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001884:	3402      	adds	r4, #2
 8001886:	9305      	str	r3, [sp, #20]
 8001888:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800194c <_svfiprintf_r+0x1f4>
 800188c:	7821      	ldrb	r1, [r4, #0]
 800188e:	2203      	movs	r2, #3
 8001890:	4650      	mov	r0, sl
 8001892:	f7fe fca5 	bl	80001e0 <memchr>
 8001896:	b138      	cbz	r0, 80018a8 <_svfiprintf_r+0x150>
 8001898:	9b04      	ldr	r3, [sp, #16]
 800189a:	eba0 000a 	sub.w	r0, r0, sl
 800189e:	2240      	movs	r2, #64	@ 0x40
 80018a0:	4082      	lsls	r2, r0
 80018a2:	4313      	orrs	r3, r2
 80018a4:	3401      	adds	r4, #1
 80018a6:	9304      	str	r3, [sp, #16]
 80018a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018ac:	4824      	ldr	r0, [pc, #144]	@ (8001940 <_svfiprintf_r+0x1e8>)
 80018ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80018b2:	2206      	movs	r2, #6
 80018b4:	f7fe fc94 	bl	80001e0 <memchr>
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d036      	beq.n	800192a <_svfiprintf_r+0x1d2>
 80018bc:	4b21      	ldr	r3, [pc, #132]	@ (8001944 <_svfiprintf_r+0x1ec>)
 80018be:	bb1b      	cbnz	r3, 8001908 <_svfiprintf_r+0x1b0>
 80018c0:	9b03      	ldr	r3, [sp, #12]
 80018c2:	3307      	adds	r3, #7
 80018c4:	f023 0307 	bic.w	r3, r3, #7
 80018c8:	3308      	adds	r3, #8
 80018ca:	9303      	str	r3, [sp, #12]
 80018cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80018ce:	4433      	add	r3, r6
 80018d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80018d2:	e76a      	b.n	80017aa <_svfiprintf_r+0x52>
 80018d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80018d8:	460c      	mov	r4, r1
 80018da:	2001      	movs	r0, #1
 80018dc:	e7a8      	b.n	8001830 <_svfiprintf_r+0xd8>
 80018de:	2300      	movs	r3, #0
 80018e0:	3401      	adds	r4, #1
 80018e2:	9305      	str	r3, [sp, #20]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 0c0a 	mov.w	ip, #10
 80018ea:	4620      	mov	r0, r4
 80018ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018f0:	3a30      	subs	r2, #48	@ 0x30
 80018f2:	2a09      	cmp	r2, #9
 80018f4:	d903      	bls.n	80018fe <_svfiprintf_r+0x1a6>
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0c6      	beq.n	8001888 <_svfiprintf_r+0x130>
 80018fa:	9105      	str	r1, [sp, #20]
 80018fc:	e7c4      	b.n	8001888 <_svfiprintf_r+0x130>
 80018fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8001902:	4604      	mov	r4, r0
 8001904:	2301      	movs	r3, #1
 8001906:	e7f0      	b.n	80018ea <_svfiprintf_r+0x192>
 8001908:	ab03      	add	r3, sp, #12
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	462a      	mov	r2, r5
 800190e:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <_svfiprintf_r+0x1f0>)
 8001910:	a904      	add	r1, sp, #16
 8001912:	4638      	mov	r0, r7
 8001914:	f3af 8000 	nop.w
 8001918:	1c42      	adds	r2, r0, #1
 800191a:	4606      	mov	r6, r0
 800191c:	d1d6      	bne.n	80018cc <_svfiprintf_r+0x174>
 800191e:	89ab      	ldrh	r3, [r5, #12]
 8001920:	065b      	lsls	r3, r3, #25
 8001922:	f53f af2d 	bmi.w	8001780 <_svfiprintf_r+0x28>
 8001926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001928:	e72c      	b.n	8001784 <_svfiprintf_r+0x2c>
 800192a:	ab03      	add	r3, sp, #12
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	462a      	mov	r2, r5
 8001930:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <_svfiprintf_r+0x1f0>)
 8001932:	a904      	add	r1, sp, #16
 8001934:	4638      	mov	r0, r7
 8001936:	f000 f879 	bl	8001a2c <_printf_i>
 800193a:	e7ed      	b.n	8001918 <_svfiprintf_r+0x1c0>
 800193c:	08002597 	.word	0x08002597
 8001940:	080025a1 	.word	0x080025a1
 8001944:	00000000 	.word	0x00000000
 8001948:	080016a1 	.word	0x080016a1
 800194c:	0800259d 	.word	0x0800259d

08001950 <_printf_common>:
 8001950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001954:	4616      	mov	r6, r2
 8001956:	4698      	mov	r8, r3
 8001958:	688a      	ldr	r2, [r1, #8]
 800195a:	690b      	ldr	r3, [r1, #16]
 800195c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001960:	4293      	cmp	r3, r2
 8001962:	bfb8      	it	lt
 8001964:	4613      	movlt	r3, r2
 8001966:	6033      	str	r3, [r6, #0]
 8001968:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800196c:	4607      	mov	r7, r0
 800196e:	460c      	mov	r4, r1
 8001970:	b10a      	cbz	r2, 8001976 <_printf_common+0x26>
 8001972:	3301      	adds	r3, #1
 8001974:	6033      	str	r3, [r6, #0]
 8001976:	6823      	ldr	r3, [r4, #0]
 8001978:	0699      	lsls	r1, r3, #26
 800197a:	bf42      	ittt	mi
 800197c:	6833      	ldrmi	r3, [r6, #0]
 800197e:	3302      	addmi	r3, #2
 8001980:	6033      	strmi	r3, [r6, #0]
 8001982:	6825      	ldr	r5, [r4, #0]
 8001984:	f015 0506 	ands.w	r5, r5, #6
 8001988:	d106      	bne.n	8001998 <_printf_common+0x48>
 800198a:	f104 0a19 	add.w	sl, r4, #25
 800198e:	68e3      	ldr	r3, [r4, #12]
 8001990:	6832      	ldr	r2, [r6, #0]
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	42ab      	cmp	r3, r5
 8001996:	dc26      	bgt.n	80019e6 <_printf_common+0x96>
 8001998:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800199c:	6822      	ldr	r2, [r4, #0]
 800199e:	3b00      	subs	r3, #0
 80019a0:	bf18      	it	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	0692      	lsls	r2, r2, #26
 80019a6:	d42b      	bmi.n	8001a00 <_printf_common+0xb0>
 80019a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80019ac:	4641      	mov	r1, r8
 80019ae:	4638      	mov	r0, r7
 80019b0:	47c8      	blx	r9
 80019b2:	3001      	adds	r0, #1
 80019b4:	d01e      	beq.n	80019f4 <_printf_common+0xa4>
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	6922      	ldr	r2, [r4, #16]
 80019ba:	f003 0306 	and.w	r3, r3, #6
 80019be:	2b04      	cmp	r3, #4
 80019c0:	bf02      	ittt	eq
 80019c2:	68e5      	ldreq	r5, [r4, #12]
 80019c4:	6833      	ldreq	r3, [r6, #0]
 80019c6:	1aed      	subeq	r5, r5, r3
 80019c8:	68a3      	ldr	r3, [r4, #8]
 80019ca:	bf0c      	ite	eq
 80019cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019d0:	2500      	movne	r5, #0
 80019d2:	4293      	cmp	r3, r2
 80019d4:	bfc4      	itt	gt
 80019d6:	1a9b      	subgt	r3, r3, r2
 80019d8:	18ed      	addgt	r5, r5, r3
 80019da:	2600      	movs	r6, #0
 80019dc:	341a      	adds	r4, #26
 80019de:	42b5      	cmp	r5, r6
 80019e0:	d11a      	bne.n	8001a18 <_printf_common+0xc8>
 80019e2:	2000      	movs	r0, #0
 80019e4:	e008      	b.n	80019f8 <_printf_common+0xa8>
 80019e6:	2301      	movs	r3, #1
 80019e8:	4652      	mov	r2, sl
 80019ea:	4641      	mov	r1, r8
 80019ec:	4638      	mov	r0, r7
 80019ee:	47c8      	blx	r9
 80019f0:	3001      	adds	r0, #1
 80019f2:	d103      	bne.n	80019fc <_printf_common+0xac>
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019fc:	3501      	adds	r5, #1
 80019fe:	e7c6      	b.n	800198e <_printf_common+0x3e>
 8001a00:	18e1      	adds	r1, r4, r3
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	2030      	movs	r0, #48	@ 0x30
 8001a06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001a0a:	4422      	add	r2, r4
 8001a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001a10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001a14:	3302      	adds	r3, #2
 8001a16:	e7c7      	b.n	80019a8 <_printf_common+0x58>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	4622      	mov	r2, r4
 8001a1c:	4641      	mov	r1, r8
 8001a1e:	4638      	mov	r0, r7
 8001a20:	47c8      	blx	r9
 8001a22:	3001      	adds	r0, #1
 8001a24:	d0e6      	beq.n	80019f4 <_printf_common+0xa4>
 8001a26:	3601      	adds	r6, #1
 8001a28:	e7d9      	b.n	80019de <_printf_common+0x8e>
	...

08001a2c <_printf_i>:
 8001a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a30:	7e0f      	ldrb	r7, [r1, #24]
 8001a32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001a34:	2f78      	cmp	r7, #120	@ 0x78
 8001a36:	4691      	mov	r9, r2
 8001a38:	4680      	mov	r8, r0
 8001a3a:	460c      	mov	r4, r1
 8001a3c:	469a      	mov	sl, r3
 8001a3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001a42:	d807      	bhi.n	8001a54 <_printf_i+0x28>
 8001a44:	2f62      	cmp	r7, #98	@ 0x62
 8001a46:	d80a      	bhi.n	8001a5e <_printf_i+0x32>
 8001a48:	2f00      	cmp	r7, #0
 8001a4a:	f000 80d2 	beq.w	8001bf2 <_printf_i+0x1c6>
 8001a4e:	2f58      	cmp	r7, #88	@ 0x58
 8001a50:	f000 80b9 	beq.w	8001bc6 <_printf_i+0x19a>
 8001a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001a5c:	e03a      	b.n	8001ad4 <_printf_i+0xa8>
 8001a5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001a62:	2b15      	cmp	r3, #21
 8001a64:	d8f6      	bhi.n	8001a54 <_printf_i+0x28>
 8001a66:	a101      	add	r1, pc, #4	@ (adr r1, 8001a6c <_printf_i+0x40>)
 8001a68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a6c:	08001ac5 	.word	0x08001ac5
 8001a70:	08001ad9 	.word	0x08001ad9
 8001a74:	08001a55 	.word	0x08001a55
 8001a78:	08001a55 	.word	0x08001a55
 8001a7c:	08001a55 	.word	0x08001a55
 8001a80:	08001a55 	.word	0x08001a55
 8001a84:	08001ad9 	.word	0x08001ad9
 8001a88:	08001a55 	.word	0x08001a55
 8001a8c:	08001a55 	.word	0x08001a55
 8001a90:	08001a55 	.word	0x08001a55
 8001a94:	08001a55 	.word	0x08001a55
 8001a98:	08001bd9 	.word	0x08001bd9
 8001a9c:	08001b03 	.word	0x08001b03
 8001aa0:	08001b93 	.word	0x08001b93
 8001aa4:	08001a55 	.word	0x08001a55
 8001aa8:	08001a55 	.word	0x08001a55
 8001aac:	08001bfb 	.word	0x08001bfb
 8001ab0:	08001a55 	.word	0x08001a55
 8001ab4:	08001b03 	.word	0x08001b03
 8001ab8:	08001a55 	.word	0x08001a55
 8001abc:	08001a55 	.word	0x08001a55
 8001ac0:	08001b9b 	.word	0x08001b9b
 8001ac4:	6833      	ldr	r3, [r6, #0]
 8001ac6:	1d1a      	adds	r2, r3, #4
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6032      	str	r2, [r6, #0]
 8001acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ad0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e09d      	b.n	8001c14 <_printf_i+0x1e8>
 8001ad8:	6833      	ldr	r3, [r6, #0]
 8001ada:	6820      	ldr	r0, [r4, #0]
 8001adc:	1d19      	adds	r1, r3, #4
 8001ade:	6031      	str	r1, [r6, #0]
 8001ae0:	0606      	lsls	r6, r0, #24
 8001ae2:	d501      	bpl.n	8001ae8 <_printf_i+0xbc>
 8001ae4:	681d      	ldr	r5, [r3, #0]
 8001ae6:	e003      	b.n	8001af0 <_printf_i+0xc4>
 8001ae8:	0645      	lsls	r5, r0, #25
 8001aea:	d5fb      	bpl.n	8001ae4 <_printf_i+0xb8>
 8001aec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001af0:	2d00      	cmp	r5, #0
 8001af2:	da03      	bge.n	8001afc <_printf_i+0xd0>
 8001af4:	232d      	movs	r3, #45	@ 0x2d
 8001af6:	426d      	negs	r5, r5
 8001af8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001afc:	4859      	ldr	r0, [pc, #356]	@ (8001c64 <_printf_i+0x238>)
 8001afe:	230a      	movs	r3, #10
 8001b00:	e011      	b.n	8001b26 <_printf_i+0xfa>
 8001b02:	6821      	ldr	r1, [r4, #0]
 8001b04:	6833      	ldr	r3, [r6, #0]
 8001b06:	0608      	lsls	r0, r1, #24
 8001b08:	f853 5b04 	ldr.w	r5, [r3], #4
 8001b0c:	d402      	bmi.n	8001b14 <_printf_i+0xe8>
 8001b0e:	0649      	lsls	r1, r1, #25
 8001b10:	bf48      	it	mi
 8001b12:	b2ad      	uxthmi	r5, r5
 8001b14:	2f6f      	cmp	r7, #111	@ 0x6f
 8001b16:	4853      	ldr	r0, [pc, #332]	@ (8001c64 <_printf_i+0x238>)
 8001b18:	6033      	str	r3, [r6, #0]
 8001b1a:	bf14      	ite	ne
 8001b1c:	230a      	movne	r3, #10
 8001b1e:	2308      	moveq	r3, #8
 8001b20:	2100      	movs	r1, #0
 8001b22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001b26:	6866      	ldr	r6, [r4, #4]
 8001b28:	60a6      	str	r6, [r4, #8]
 8001b2a:	2e00      	cmp	r6, #0
 8001b2c:	bfa2      	ittt	ge
 8001b2e:	6821      	ldrge	r1, [r4, #0]
 8001b30:	f021 0104 	bicge.w	r1, r1, #4
 8001b34:	6021      	strge	r1, [r4, #0]
 8001b36:	b90d      	cbnz	r5, 8001b3c <_printf_i+0x110>
 8001b38:	2e00      	cmp	r6, #0
 8001b3a:	d04b      	beq.n	8001bd4 <_printf_i+0x1a8>
 8001b3c:	4616      	mov	r6, r2
 8001b3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b42:	fb03 5711 	mls	r7, r3, r1, r5
 8001b46:	5dc7      	ldrb	r7, [r0, r7]
 8001b48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b4c:	462f      	mov	r7, r5
 8001b4e:	42bb      	cmp	r3, r7
 8001b50:	460d      	mov	r5, r1
 8001b52:	d9f4      	bls.n	8001b3e <_printf_i+0x112>
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d10b      	bne.n	8001b70 <_printf_i+0x144>
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	07df      	lsls	r7, r3, #31
 8001b5c:	d508      	bpl.n	8001b70 <_printf_i+0x144>
 8001b5e:	6923      	ldr	r3, [r4, #16]
 8001b60:	6861      	ldr	r1, [r4, #4]
 8001b62:	4299      	cmp	r1, r3
 8001b64:	bfde      	ittt	le
 8001b66:	2330      	movle	r3, #48	@ 0x30
 8001b68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001b70:	1b92      	subs	r2, r2, r6
 8001b72:	6122      	str	r2, [r4, #16]
 8001b74:	f8cd a000 	str.w	sl, [sp]
 8001b78:	464b      	mov	r3, r9
 8001b7a:	aa03      	add	r2, sp, #12
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	4640      	mov	r0, r8
 8001b80:	f7ff fee6 	bl	8001950 <_printf_common>
 8001b84:	3001      	adds	r0, #1
 8001b86:	d14a      	bne.n	8001c1e <_printf_i+0x1f2>
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	b004      	add	sp, #16
 8001b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	f043 0320 	orr.w	r3, r3, #32
 8001b98:	6023      	str	r3, [r4, #0]
 8001b9a:	4833      	ldr	r0, [pc, #204]	@ (8001c68 <_printf_i+0x23c>)
 8001b9c:	2778      	movs	r7, #120	@ 0x78
 8001b9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001ba2:	6823      	ldr	r3, [r4, #0]
 8001ba4:	6831      	ldr	r1, [r6, #0]
 8001ba6:	061f      	lsls	r7, r3, #24
 8001ba8:	f851 5b04 	ldr.w	r5, [r1], #4
 8001bac:	d402      	bmi.n	8001bb4 <_printf_i+0x188>
 8001bae:	065f      	lsls	r7, r3, #25
 8001bb0:	bf48      	it	mi
 8001bb2:	b2ad      	uxthmi	r5, r5
 8001bb4:	6031      	str	r1, [r6, #0]
 8001bb6:	07d9      	lsls	r1, r3, #31
 8001bb8:	bf44      	itt	mi
 8001bba:	f043 0320 	orrmi.w	r3, r3, #32
 8001bbe:	6023      	strmi	r3, [r4, #0]
 8001bc0:	b11d      	cbz	r5, 8001bca <_printf_i+0x19e>
 8001bc2:	2310      	movs	r3, #16
 8001bc4:	e7ac      	b.n	8001b20 <_printf_i+0xf4>
 8001bc6:	4827      	ldr	r0, [pc, #156]	@ (8001c64 <_printf_i+0x238>)
 8001bc8:	e7e9      	b.n	8001b9e <_printf_i+0x172>
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	f023 0320 	bic.w	r3, r3, #32
 8001bd0:	6023      	str	r3, [r4, #0]
 8001bd2:	e7f6      	b.n	8001bc2 <_printf_i+0x196>
 8001bd4:	4616      	mov	r6, r2
 8001bd6:	e7bd      	b.n	8001b54 <_printf_i+0x128>
 8001bd8:	6833      	ldr	r3, [r6, #0]
 8001bda:	6825      	ldr	r5, [r4, #0]
 8001bdc:	6961      	ldr	r1, [r4, #20]
 8001bde:	1d18      	adds	r0, r3, #4
 8001be0:	6030      	str	r0, [r6, #0]
 8001be2:	062e      	lsls	r6, r5, #24
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	d501      	bpl.n	8001bec <_printf_i+0x1c0>
 8001be8:	6019      	str	r1, [r3, #0]
 8001bea:	e002      	b.n	8001bf2 <_printf_i+0x1c6>
 8001bec:	0668      	lsls	r0, r5, #25
 8001bee:	d5fb      	bpl.n	8001be8 <_printf_i+0x1bc>
 8001bf0:	8019      	strh	r1, [r3, #0]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	6123      	str	r3, [r4, #16]
 8001bf6:	4616      	mov	r6, r2
 8001bf8:	e7bc      	b.n	8001b74 <_printf_i+0x148>
 8001bfa:	6833      	ldr	r3, [r6, #0]
 8001bfc:	1d1a      	adds	r2, r3, #4
 8001bfe:	6032      	str	r2, [r6, #0]
 8001c00:	681e      	ldr	r6, [r3, #0]
 8001c02:	6862      	ldr	r2, [r4, #4]
 8001c04:	2100      	movs	r1, #0
 8001c06:	4630      	mov	r0, r6
 8001c08:	f7fe faea 	bl	80001e0 <memchr>
 8001c0c:	b108      	cbz	r0, 8001c12 <_printf_i+0x1e6>
 8001c0e:	1b80      	subs	r0, r0, r6
 8001c10:	6060      	str	r0, [r4, #4]
 8001c12:	6863      	ldr	r3, [r4, #4]
 8001c14:	6123      	str	r3, [r4, #16]
 8001c16:	2300      	movs	r3, #0
 8001c18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c1c:	e7aa      	b.n	8001b74 <_printf_i+0x148>
 8001c1e:	6923      	ldr	r3, [r4, #16]
 8001c20:	4632      	mov	r2, r6
 8001c22:	4649      	mov	r1, r9
 8001c24:	4640      	mov	r0, r8
 8001c26:	47d0      	blx	sl
 8001c28:	3001      	adds	r0, #1
 8001c2a:	d0ad      	beq.n	8001b88 <_printf_i+0x15c>
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	079b      	lsls	r3, r3, #30
 8001c30:	d413      	bmi.n	8001c5a <_printf_i+0x22e>
 8001c32:	68e0      	ldr	r0, [r4, #12]
 8001c34:	9b03      	ldr	r3, [sp, #12]
 8001c36:	4298      	cmp	r0, r3
 8001c38:	bfb8      	it	lt
 8001c3a:	4618      	movlt	r0, r3
 8001c3c:	e7a6      	b.n	8001b8c <_printf_i+0x160>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	4632      	mov	r2, r6
 8001c42:	4649      	mov	r1, r9
 8001c44:	4640      	mov	r0, r8
 8001c46:	47d0      	blx	sl
 8001c48:	3001      	adds	r0, #1
 8001c4a:	d09d      	beq.n	8001b88 <_printf_i+0x15c>
 8001c4c:	3501      	adds	r5, #1
 8001c4e:	68e3      	ldr	r3, [r4, #12]
 8001c50:	9903      	ldr	r1, [sp, #12]
 8001c52:	1a5b      	subs	r3, r3, r1
 8001c54:	42ab      	cmp	r3, r5
 8001c56:	dcf2      	bgt.n	8001c3e <_printf_i+0x212>
 8001c58:	e7eb      	b.n	8001c32 <_printf_i+0x206>
 8001c5a:	2500      	movs	r5, #0
 8001c5c:	f104 0619 	add.w	r6, r4, #25
 8001c60:	e7f5      	b.n	8001c4e <_printf_i+0x222>
 8001c62:	bf00      	nop
 8001c64:	080025a8 	.word	0x080025a8
 8001c68:	080025b9 	.word	0x080025b9

08001c6c <memmove>:
 8001c6c:	4288      	cmp	r0, r1
 8001c6e:	b510      	push	{r4, lr}
 8001c70:	eb01 0402 	add.w	r4, r1, r2
 8001c74:	d902      	bls.n	8001c7c <memmove+0x10>
 8001c76:	4284      	cmp	r4, r0
 8001c78:	4623      	mov	r3, r4
 8001c7a:	d807      	bhi.n	8001c8c <memmove+0x20>
 8001c7c:	1e43      	subs	r3, r0, #1
 8001c7e:	42a1      	cmp	r1, r4
 8001c80:	d008      	beq.n	8001c94 <memmove+0x28>
 8001c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c8a:	e7f8      	b.n	8001c7e <memmove+0x12>
 8001c8c:	4402      	add	r2, r0
 8001c8e:	4601      	mov	r1, r0
 8001c90:	428a      	cmp	r2, r1
 8001c92:	d100      	bne.n	8001c96 <memmove+0x2a>
 8001c94:	bd10      	pop	{r4, pc}
 8001c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c9e:	e7f7      	b.n	8001c90 <memmove+0x24>

08001ca0 <_sbrk_r>:
 8001ca0:	b538      	push	{r3, r4, r5, lr}
 8001ca2:	4d06      	ldr	r5, [pc, #24]	@ (8001cbc <_sbrk_r+0x1c>)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	4608      	mov	r0, r1
 8001caa:	602b      	str	r3, [r5, #0]
 8001cac:	f7ff fa88 	bl	80011c0 <_sbrk>
 8001cb0:	1c43      	adds	r3, r0, #1
 8001cb2:	d102      	bne.n	8001cba <_sbrk_r+0x1a>
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	b103      	cbz	r3, 8001cba <_sbrk_r+0x1a>
 8001cb8:	6023      	str	r3, [r4, #0]
 8001cba:	bd38      	pop	{r3, r4, r5, pc}
 8001cbc:	2000024c 	.word	0x2000024c

08001cc0 <memcpy>:
 8001cc0:	440a      	add	r2, r1
 8001cc2:	4291      	cmp	r1, r2
 8001cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8001cc8:	d100      	bne.n	8001ccc <memcpy+0xc>
 8001cca:	4770      	bx	lr
 8001ccc:	b510      	push	{r4, lr}
 8001cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001cd6:	4291      	cmp	r1, r2
 8001cd8:	d1f9      	bne.n	8001cce <memcpy+0xe>
 8001cda:	bd10      	pop	{r4, pc}

08001cdc <_realloc_r>:
 8001cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ce0:	4680      	mov	r8, r0
 8001ce2:	4615      	mov	r5, r2
 8001ce4:	460c      	mov	r4, r1
 8001ce6:	b921      	cbnz	r1, 8001cf2 <_realloc_r+0x16>
 8001ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cec:	4611      	mov	r1, r2
 8001cee:	f7ff bc4b 	b.w	8001588 <_malloc_r>
 8001cf2:	b92a      	cbnz	r2, 8001d00 <_realloc_r+0x24>
 8001cf4:	f7ff fbdc 	bl	80014b0 <_free_r>
 8001cf8:	2400      	movs	r4, #0
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d00:	f000 f81a 	bl	8001d38 <_malloc_usable_size_r>
 8001d04:	4285      	cmp	r5, r0
 8001d06:	4606      	mov	r6, r0
 8001d08:	d802      	bhi.n	8001d10 <_realloc_r+0x34>
 8001d0a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001d0e:	d8f4      	bhi.n	8001cfa <_realloc_r+0x1e>
 8001d10:	4629      	mov	r1, r5
 8001d12:	4640      	mov	r0, r8
 8001d14:	f7ff fc38 	bl	8001588 <_malloc_r>
 8001d18:	4607      	mov	r7, r0
 8001d1a:	2800      	cmp	r0, #0
 8001d1c:	d0ec      	beq.n	8001cf8 <_realloc_r+0x1c>
 8001d1e:	42b5      	cmp	r5, r6
 8001d20:	462a      	mov	r2, r5
 8001d22:	4621      	mov	r1, r4
 8001d24:	bf28      	it	cs
 8001d26:	4632      	movcs	r2, r6
 8001d28:	f7ff ffca 	bl	8001cc0 <memcpy>
 8001d2c:	4621      	mov	r1, r4
 8001d2e:	4640      	mov	r0, r8
 8001d30:	f7ff fbbe 	bl	80014b0 <_free_r>
 8001d34:	463c      	mov	r4, r7
 8001d36:	e7e0      	b.n	8001cfa <_realloc_r+0x1e>

08001d38 <_malloc_usable_size_r>:
 8001d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d3c:	1f18      	subs	r0, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bfbc      	itt	lt
 8001d42:	580b      	ldrlt	r3, [r1, r0]
 8001d44:	18c0      	addlt	r0, r0, r3
 8001d46:	4770      	bx	lr

08001d48 <powf>:
 8001d48:	b508      	push	{r3, lr}
 8001d4a:	ed2d 8b04 	vpush	{d8-d9}
 8001d4e:	eeb0 8a60 	vmov.f32	s16, s1
 8001d52:	eeb0 9a40 	vmov.f32	s18, s0
 8001d56:	f000 f859 	bl	8001e0c <__ieee754_powf>
 8001d5a:	eeb4 8a48 	vcmp.f32	s16, s16
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	eef0 8a40 	vmov.f32	s17, s0
 8001d66:	d63e      	bvs.n	8001de6 <powf+0x9e>
 8001d68:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d70:	d112      	bne.n	8001d98 <powf+0x50>
 8001d72:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	d039      	beq.n	8001df0 <powf+0xa8>
 8001d7c:	eeb0 0a48 	vmov.f32	s0, s16
 8001d80:	f000 f839 	bl	8001df6 <finitef>
 8001d84:	b378      	cbz	r0, 8001de6 <powf+0x9e>
 8001d86:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	d52a      	bpl.n	8001de6 <powf+0x9e>
 8001d90:	f7ff fb62 	bl	8001458 <__errno>
 8001d94:	2322      	movs	r3, #34	@ 0x22
 8001d96:	e014      	b.n	8001dc2 <powf+0x7a>
 8001d98:	f000 f82d 	bl	8001df6 <finitef>
 8001d9c:	b998      	cbnz	r0, 8001dc6 <powf+0x7e>
 8001d9e:	eeb0 0a49 	vmov.f32	s0, s18
 8001da2:	f000 f828 	bl	8001df6 <finitef>
 8001da6:	b170      	cbz	r0, 8001dc6 <powf+0x7e>
 8001da8:	eeb0 0a48 	vmov.f32	s0, s16
 8001dac:	f000 f823 	bl	8001df6 <finitef>
 8001db0:	b148      	cbz	r0, 8001dc6 <powf+0x7e>
 8001db2:	eef4 8a68 	vcmp.f32	s17, s17
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	d7e9      	bvc.n	8001d90 <powf+0x48>
 8001dbc:	f7ff fb4c 	bl	8001458 <__errno>
 8001dc0:	2321      	movs	r3, #33	@ 0x21
 8001dc2:	6003      	str	r3, [r0, #0]
 8001dc4:	e00f      	b.n	8001de6 <powf+0x9e>
 8001dc6:	eef5 8a40 	vcmp.f32	s17, #0.0
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	d10a      	bne.n	8001de6 <powf+0x9e>
 8001dd0:	eeb0 0a49 	vmov.f32	s0, s18
 8001dd4:	f000 f80f 	bl	8001df6 <finitef>
 8001dd8:	b128      	cbz	r0, 8001de6 <powf+0x9e>
 8001dda:	eeb0 0a48 	vmov.f32	s0, s16
 8001dde:	f000 f80a 	bl	8001df6 <finitef>
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d1d4      	bne.n	8001d90 <powf+0x48>
 8001de6:	eeb0 0a68 	vmov.f32	s0, s17
 8001dea:	ecbd 8b04 	vpop	{d8-d9}
 8001dee:	bd08      	pop	{r3, pc}
 8001df0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8001df4:	e7f7      	b.n	8001de6 <powf+0x9e>

08001df6 <finitef>:
 8001df6:	ee10 3a10 	vmov	r3, s0
 8001dfa:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8001dfe:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8001e02:	bfac      	ite	ge
 8001e04:	2000      	movge	r0, #0
 8001e06:	2001      	movlt	r0, #1
 8001e08:	4770      	bx	lr
	...

08001e0c <__ieee754_powf>:
 8001e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e10:	ee10 4a90 	vmov	r4, s1
 8001e14:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8001e18:	ed2d 8b02 	vpush	{d8}
 8001e1c:	ee10 6a10 	vmov	r6, s0
 8001e20:	eeb0 8a40 	vmov.f32	s16, s0
 8001e24:	eef0 8a60 	vmov.f32	s17, s1
 8001e28:	d10c      	bne.n	8001e44 <__ieee754_powf+0x38>
 8001e2a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8001e2e:	0076      	lsls	r6, r6, #1
 8001e30:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8001e34:	f240 829c 	bls.w	8002370 <__ieee754_powf+0x564>
 8001e38:	ee38 0a28 	vadd.f32	s0, s16, s17
 8001e3c:	ecbd 8b02 	vpop	{d8}
 8001e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e44:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8001e48:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8001e4c:	d802      	bhi.n	8001e54 <__ieee754_powf+0x48>
 8001e4e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8001e52:	d908      	bls.n	8001e66 <__ieee754_powf+0x5a>
 8001e54:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8001e58:	d1ee      	bne.n	8001e38 <__ieee754_powf+0x2c>
 8001e5a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8001e5e:	0064      	lsls	r4, r4, #1
 8001e60:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8001e64:	e7e6      	b.n	8001e34 <__ieee754_powf+0x28>
 8001e66:	2e00      	cmp	r6, #0
 8001e68:	da1e      	bge.n	8001ea8 <__ieee754_powf+0x9c>
 8001e6a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8001e6e:	d22b      	bcs.n	8001ec8 <__ieee754_powf+0xbc>
 8001e70:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8001e74:	d332      	bcc.n	8001edc <__ieee754_powf+0xd0>
 8001e76:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8001e7a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8001e7e:	fa49 f503 	asr.w	r5, r9, r3
 8001e82:	fa05 f303 	lsl.w	r3, r5, r3
 8001e86:	454b      	cmp	r3, r9
 8001e88:	d126      	bne.n	8001ed8 <__ieee754_powf+0xcc>
 8001e8a:	f005 0501 	and.w	r5, r5, #1
 8001e8e:	f1c5 0502 	rsb	r5, r5, #2
 8001e92:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8001e96:	d122      	bne.n	8001ede <__ieee754_powf+0xd2>
 8001e98:	2c00      	cmp	r4, #0
 8001e9a:	f280 826f 	bge.w	800237c <__ieee754_powf+0x570>
 8001e9e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001ea2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8001ea6:	e7c9      	b.n	8001e3c <__ieee754_powf+0x30>
 8001ea8:	2500      	movs	r5, #0
 8001eaa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8001eae:	d1f0      	bne.n	8001e92 <__ieee754_powf+0x86>
 8001eb0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8001eb4:	f000 825c 	beq.w	8002370 <__ieee754_powf+0x564>
 8001eb8:	d908      	bls.n	8001ecc <__ieee754_powf+0xc0>
 8001eba:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800221c <__ieee754_powf+0x410>
 8001ebe:	2c00      	cmp	r4, #0
 8001ec0:	bfa8      	it	ge
 8001ec2:	eeb0 0a68 	vmovge.f32	s0, s17
 8001ec6:	e7b9      	b.n	8001e3c <__ieee754_powf+0x30>
 8001ec8:	2502      	movs	r5, #2
 8001eca:	e7ee      	b.n	8001eaa <__ieee754_powf+0x9e>
 8001ecc:	2c00      	cmp	r4, #0
 8001ece:	f280 8252 	bge.w	8002376 <__ieee754_powf+0x56a>
 8001ed2:	eeb1 0a68 	vneg.f32	s0, s17
 8001ed6:	e7b1      	b.n	8001e3c <__ieee754_powf+0x30>
 8001ed8:	2500      	movs	r5, #0
 8001eda:	e7da      	b.n	8001e92 <__ieee754_powf+0x86>
 8001edc:	2500      	movs	r5, #0
 8001ede:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8001ee2:	d102      	bne.n	8001eea <__ieee754_powf+0xde>
 8001ee4:	ee28 0a08 	vmul.f32	s0, s16, s16
 8001ee8:	e7a8      	b.n	8001e3c <__ieee754_powf+0x30>
 8001eea:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8001eee:	d109      	bne.n	8001f04 <__ieee754_powf+0xf8>
 8001ef0:	2e00      	cmp	r6, #0
 8001ef2:	db07      	blt.n	8001f04 <__ieee754_powf+0xf8>
 8001ef4:	eeb0 0a48 	vmov.f32	s0, s16
 8001ef8:	ecbd 8b02 	vpop	{d8}
 8001efc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f00:	f000 bae8 	b.w	80024d4 <__ieee754_sqrtf>
 8001f04:	eeb0 0a48 	vmov.f32	s0, s16
 8001f08:	f000 fa50 	bl	80023ac <fabsf>
 8001f0c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8001f10:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8001f14:	4647      	mov	r7, r8
 8001f16:	d002      	beq.n	8001f1e <__ieee754_powf+0x112>
 8001f18:	f1b8 0f00 	cmp.w	r8, #0
 8001f1c:	d117      	bne.n	8001f4e <__ieee754_powf+0x142>
 8001f1e:	2c00      	cmp	r4, #0
 8001f20:	bfbc      	itt	lt
 8001f22:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8001f26:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8001f2a:	2e00      	cmp	r6, #0
 8001f2c:	da86      	bge.n	8001e3c <__ieee754_powf+0x30>
 8001f2e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8001f32:	ea58 0805 	orrs.w	r8, r8, r5
 8001f36:	d104      	bne.n	8001f42 <__ieee754_powf+0x136>
 8001f38:	ee70 7a40 	vsub.f32	s15, s0, s0
 8001f3c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8001f40:	e77c      	b.n	8001e3c <__ieee754_powf+0x30>
 8001f42:	2d01      	cmp	r5, #1
 8001f44:	f47f af7a 	bne.w	8001e3c <__ieee754_powf+0x30>
 8001f48:	eeb1 0a40 	vneg.f32	s0, s0
 8001f4c:	e776      	b.n	8001e3c <__ieee754_powf+0x30>
 8001f4e:	0ff0      	lsrs	r0, r6, #31
 8001f50:	3801      	subs	r0, #1
 8001f52:	ea55 0300 	orrs.w	r3, r5, r0
 8001f56:	d104      	bne.n	8001f62 <__ieee754_powf+0x156>
 8001f58:	ee38 8a48 	vsub.f32	s16, s16, s16
 8001f5c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8001f60:	e76c      	b.n	8001e3c <__ieee754_powf+0x30>
 8001f62:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8001f66:	d973      	bls.n	8002050 <__ieee754_powf+0x244>
 8001f68:	4bad      	ldr	r3, [pc, #692]	@ (8002220 <__ieee754_powf+0x414>)
 8001f6a:	4598      	cmp	r8, r3
 8001f6c:	d808      	bhi.n	8001f80 <__ieee754_powf+0x174>
 8001f6e:	2c00      	cmp	r4, #0
 8001f70:	da0b      	bge.n	8001f8a <__ieee754_powf+0x17e>
 8001f72:	2000      	movs	r0, #0
 8001f74:	ecbd 8b02 	vpop	{d8}
 8001f78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f7c:	f000 baa4 	b.w	80024c8 <__math_oflowf>
 8001f80:	4ba8      	ldr	r3, [pc, #672]	@ (8002224 <__ieee754_powf+0x418>)
 8001f82:	4598      	cmp	r8, r3
 8001f84:	d908      	bls.n	8001f98 <__ieee754_powf+0x18c>
 8001f86:	2c00      	cmp	r4, #0
 8001f88:	dcf3      	bgt.n	8001f72 <__ieee754_powf+0x166>
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	ecbd 8b02 	vpop	{d8}
 8001f90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f94:	f000 ba92 	b.w	80024bc <__math_uflowf>
 8001f98:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001f9c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001fa0:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002228 <__ieee754_powf+0x41c>
 8001fa4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8001fa8:	eee0 6a67 	vfms.f32	s13, s0, s15
 8001fac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8001fb0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8001fb4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8001fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fbc:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800222c <__ieee754_powf+0x420>
 8001fc0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8001fc4:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8002230 <__ieee754_powf+0x424>
 8001fc8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001fcc:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8002234 <__ieee754_powf+0x428>
 8001fd0:	eef0 6a67 	vmov.f32	s13, s15
 8001fd4:	eee0 6a07 	vfma.f32	s13, s0, s14
 8001fd8:	ee16 3a90 	vmov	r3, s13
 8001fdc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001fe0:	f023 030f 	bic.w	r3, r3, #15
 8001fe4:	ee06 3a90 	vmov	s13, r3
 8001fe8:	eee0 6a47 	vfms.f32	s13, s0, s14
 8001fec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001ff0:	3d01      	subs	r5, #1
 8001ff2:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8001ff6:	4305      	orrs	r5, r0
 8001ff8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ffc:	f024 040f 	bic.w	r4, r4, #15
 8002000:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8002004:	bf18      	it	ne
 8002006:	eeb0 8a47 	vmovne.f32	s16, s14
 800200a:	ee07 4a10 	vmov	s14, r4
 800200e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8002012:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8002016:	ee07 3a90 	vmov	s15, r3
 800201a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800201e:	ee07 4a10 	vmov	s14, r4
 8002022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002026:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800202a:	ee17 1a10 	vmov	r1, s14
 800202e:	2900      	cmp	r1, #0
 8002030:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002034:	f340 80dd 	ble.w	80021f2 <__ieee754_powf+0x3e6>
 8002038:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800203c:	f240 80ca 	bls.w	80021d4 <__ieee754_powf+0x3c8>
 8002040:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002048:	bf4c      	ite	mi
 800204a:	2001      	movmi	r0, #1
 800204c:	2000      	movpl	r0, #0
 800204e:	e791      	b.n	8001f74 <__ieee754_powf+0x168>
 8002050:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8002054:	bf01      	itttt	eq
 8002056:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8002238 <__ieee754_powf+0x42c>
 800205a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800205e:	f06f 0317 	mvneq.w	r3, #23
 8002062:	ee17 7a90 	vmoveq	r7, s15
 8002066:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800206a:	bf18      	it	ne
 800206c:	2300      	movne	r3, #0
 800206e:	3a7f      	subs	r2, #127	@ 0x7f
 8002070:	441a      	add	r2, r3
 8002072:	4b72      	ldr	r3, [pc, #456]	@ (800223c <__ieee754_powf+0x430>)
 8002074:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8002078:	429f      	cmp	r7, r3
 800207a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800207e:	dd06      	ble.n	800208e <__ieee754_powf+0x282>
 8002080:	4b6f      	ldr	r3, [pc, #444]	@ (8002240 <__ieee754_powf+0x434>)
 8002082:	429f      	cmp	r7, r3
 8002084:	f340 80a4 	ble.w	80021d0 <__ieee754_powf+0x3c4>
 8002088:	3201      	adds	r2, #1
 800208a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800208e:	2600      	movs	r6, #0
 8002090:	4b6c      	ldr	r3, [pc, #432]	@ (8002244 <__ieee754_powf+0x438>)
 8002092:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002096:	ee07 1a10 	vmov	s14, r1
 800209a:	edd3 5a00 	vldr	s11, [r3]
 800209e:	4b6a      	ldr	r3, [pc, #424]	@ (8002248 <__ieee754_powf+0x43c>)
 80020a0:	ee75 7a87 	vadd.f32	s15, s11, s14
 80020a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020a8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80020ac:	1049      	asrs	r1, r1, #1
 80020ae:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80020b2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80020b6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80020ba:	ee37 6a65 	vsub.f32	s12, s14, s11
 80020be:	ee07 1a90 	vmov	s15, r1
 80020c2:	ee26 5a24 	vmul.f32	s10, s12, s9
 80020c6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80020ca:	ee15 7a10 	vmov	r7, s10
 80020ce:	401f      	ands	r7, r3
 80020d0:	ee06 7a90 	vmov	s13, r7
 80020d4:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80020d8:	ee37 7a65 	vsub.f32	s14, s14, s11
 80020dc:	ee65 7a05 	vmul.f32	s15, s10, s10
 80020e0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80020e4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800224c <__ieee754_powf+0x440>
 80020e8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8002250 <__ieee754_powf+0x444>
 80020ec:	eee7 5a87 	vfma.f32	s11, s15, s14
 80020f0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002254 <__ieee754_powf+0x448>
 80020f4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80020f8:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8002228 <__ieee754_powf+0x41c>
 80020fc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8002100:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002258 <__ieee754_powf+0x44c>
 8002104:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8002108:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800225c <__ieee754_powf+0x450>
 800210c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8002110:	eee7 5a27 	vfma.f32	s11, s14, s15
 8002114:	ee35 7a26 	vadd.f32	s14, s10, s13
 8002118:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800211c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002120:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8002124:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8002128:	eef0 5a67 	vmov.f32	s11, s15
 800212c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8002130:	ee75 5a87 	vadd.f32	s11, s11, s14
 8002134:	ee15 1a90 	vmov	r1, s11
 8002138:	4019      	ands	r1, r3
 800213a:	ee05 1a90 	vmov	s11, r1
 800213e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002142:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8002146:	ee77 7a67 	vsub.f32	s15, s14, s15
 800214a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800214e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8002152:	eeb0 6a67 	vmov.f32	s12, s15
 8002156:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800215a:	ee16 1a10 	vmov	r1, s12
 800215e:	4019      	ands	r1, r3
 8002160:	ee06 1a10 	vmov	s12, r1
 8002164:	eeb0 7a46 	vmov.f32	s14, s12
 8002168:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800216c:	493c      	ldr	r1, [pc, #240]	@ (8002260 <__ieee754_powf+0x454>)
 800216e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8002172:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002176:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8002264 <__ieee754_powf+0x458>
 800217a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8002268 <__ieee754_powf+0x45c>
 800217e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002182:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800226c <__ieee754_powf+0x460>
 8002186:	eee6 7a07 	vfma.f32	s15, s12, s14
 800218a:	ed91 7a00 	vldr	s14, [r1]
 800218e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002192:	ee07 2a10 	vmov	s14, r2
 8002196:	eef0 6a67 	vmov.f32	s13, s15
 800219a:	4a35      	ldr	r2, [pc, #212]	@ (8002270 <__ieee754_powf+0x464>)
 800219c:	eee6 6a25 	vfma.f32	s13, s12, s11
 80021a0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80021a4:	ed92 5a00 	vldr	s10, [r2]
 80021a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80021ac:	ee76 6a85 	vadd.f32	s13, s13, s10
 80021b0:	ee76 6a87 	vadd.f32	s13, s13, s14
 80021b4:	ee16 2a90 	vmov	r2, s13
 80021b8:	4013      	ands	r3, r2
 80021ba:	ee06 3a90 	vmov	s13, r3
 80021be:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80021c2:	ee37 7a45 	vsub.f32	s14, s14, s10
 80021c6:	eea6 7a65 	vfms.f32	s14, s12, s11
 80021ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021ce:	e70f      	b.n	8001ff0 <__ieee754_powf+0x1e4>
 80021d0:	2601      	movs	r6, #1
 80021d2:	e75d      	b.n	8002090 <__ieee754_powf+0x284>
 80021d4:	d152      	bne.n	800227c <__ieee754_powf+0x470>
 80021d6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002274 <__ieee754_powf+0x468>
 80021da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021de:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80021e2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80021e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ea:	f73f af29 	bgt.w	8002040 <__ieee754_powf+0x234>
 80021ee:	2386      	movs	r3, #134	@ 0x86
 80021f0:	e048      	b.n	8002284 <__ieee754_powf+0x478>
 80021f2:	4a21      	ldr	r2, [pc, #132]	@ (8002278 <__ieee754_powf+0x46c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d907      	bls.n	8002208 <__ieee754_powf+0x3fc>
 80021f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80021fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002200:	bf4c      	ite	mi
 8002202:	2001      	movmi	r0, #1
 8002204:	2000      	movpl	r0, #0
 8002206:	e6c1      	b.n	8001f8c <__ieee754_powf+0x180>
 8002208:	d138      	bne.n	800227c <__ieee754_powf+0x470>
 800220a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800220e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8002212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002216:	dbea      	blt.n	80021ee <__ieee754_powf+0x3e2>
 8002218:	e7ee      	b.n	80021f8 <__ieee754_powf+0x3ec>
 800221a:	bf00      	nop
 800221c:	00000000 	.word	0x00000000
 8002220:	3f7ffff3 	.word	0x3f7ffff3
 8002224:	3f800007 	.word	0x3f800007
 8002228:	3eaaaaab 	.word	0x3eaaaaab
 800222c:	3fb8aa3b 	.word	0x3fb8aa3b
 8002230:	36eca570 	.word	0x36eca570
 8002234:	3fb8aa00 	.word	0x3fb8aa00
 8002238:	4b800000 	.word	0x4b800000
 800223c:	001cc471 	.word	0x001cc471
 8002240:	005db3d6 	.word	0x005db3d6
 8002244:	080025dc 	.word	0x080025dc
 8002248:	fffff000 	.word	0xfffff000
 800224c:	3e6c3255 	.word	0x3e6c3255
 8002250:	3e53f142 	.word	0x3e53f142
 8002254:	3e8ba305 	.word	0x3e8ba305
 8002258:	3edb6db7 	.word	0x3edb6db7
 800225c:	3f19999a 	.word	0x3f19999a
 8002260:	080025cc 	.word	0x080025cc
 8002264:	3f76384f 	.word	0x3f76384f
 8002268:	3f763800 	.word	0x3f763800
 800226c:	369dc3a0 	.word	0x369dc3a0
 8002270:	080025d4 	.word	0x080025d4
 8002274:	3338aa3c 	.word	0x3338aa3c
 8002278:	43160000 	.word	0x43160000
 800227c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8002280:	d971      	bls.n	8002366 <__ieee754_powf+0x55a>
 8002282:	15db      	asrs	r3, r3, #23
 8002284:	3b7e      	subs	r3, #126	@ 0x7e
 8002286:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800228a:	4118      	asrs	r0, r3
 800228c:	4408      	add	r0, r1
 800228e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8002292:	4a3c      	ldr	r2, [pc, #240]	@ (8002384 <__ieee754_powf+0x578>)
 8002294:	3b7f      	subs	r3, #127	@ 0x7f
 8002296:	411a      	asrs	r2, r3
 8002298:	4002      	ands	r2, r0
 800229a:	ee07 2a10 	vmov	s14, r2
 800229e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80022a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80022a6:	f1c3 0317 	rsb	r3, r3, #23
 80022aa:	4118      	asrs	r0, r3
 80022ac:	2900      	cmp	r1, #0
 80022ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022b2:	bfb8      	it	lt
 80022b4:	4240      	neglt	r0, r0
 80022b6:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80022ba:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002388 <__ieee754_powf+0x57c>
 80022be:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800238c <__ieee754_powf+0x580>
 80022c2:	ee17 3a10 	vmov	r3, s14
 80022c6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80022ca:	f023 030f 	bic.w	r3, r3, #15
 80022ce:	ee07 3a10 	vmov	s14, r3
 80022d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80022da:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80022de:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8002390 <__ieee754_powf+0x584>
 80022e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e6:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80022ea:	eef0 6a67 	vmov.f32	s13, s15
 80022ee:	eee7 6a06 	vfma.f32	s13, s14, s12
 80022f2:	eef0 5a66 	vmov.f32	s11, s13
 80022f6:	eee7 5a46 	vfms.f32	s11, s14, s12
 80022fa:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80022fe:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8002302:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8002394 <__ieee754_powf+0x588>
 8002306:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8002398 <__ieee754_powf+0x58c>
 800230a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800230e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800239c <__ieee754_powf+0x590>
 8002312:	eee6 5a07 	vfma.f32	s11, s12, s14
 8002316:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80023a0 <__ieee754_powf+0x594>
 800231a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800231e:	eddf 5a21 	vldr	s11, [pc, #132]	@ 80023a4 <__ieee754_powf+0x598>
 8002322:	eee6 5a07 	vfma.f32	s11, s12, s14
 8002326:	eeb0 6a66 	vmov.f32	s12, s13
 800232a:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800232e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002332:	ee66 5a86 	vmul.f32	s11, s13, s12
 8002336:	ee36 6a47 	vsub.f32	s12, s12, s14
 800233a:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800233e:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8002342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002346:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800234a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800234e:	ee10 3a10 	vmov	r3, s0
 8002352:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8002356:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800235a:	da06      	bge.n	800236a <__ieee754_powf+0x55e>
 800235c:	f000 f82e 	bl	80023bc <scalbnf>
 8002360:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002364:	e56a      	b.n	8001e3c <__ieee754_powf+0x30>
 8002366:	2000      	movs	r0, #0
 8002368:	e7a5      	b.n	80022b6 <__ieee754_powf+0x4aa>
 800236a:	ee00 3a10 	vmov	s0, r3
 800236e:	e7f7      	b.n	8002360 <__ieee754_powf+0x554>
 8002370:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002374:	e562      	b.n	8001e3c <__ieee754_powf+0x30>
 8002376:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80023a8 <__ieee754_powf+0x59c>
 800237a:	e55f      	b.n	8001e3c <__ieee754_powf+0x30>
 800237c:	eeb0 0a48 	vmov.f32	s0, s16
 8002380:	e55c      	b.n	8001e3c <__ieee754_powf+0x30>
 8002382:	bf00      	nop
 8002384:	ff800000 	.word	0xff800000
 8002388:	3f317218 	.word	0x3f317218
 800238c:	3f317200 	.word	0x3f317200
 8002390:	35bfbe8c 	.word	0x35bfbe8c
 8002394:	b5ddea0e 	.word	0xb5ddea0e
 8002398:	3331bb4c 	.word	0x3331bb4c
 800239c:	388ab355 	.word	0x388ab355
 80023a0:	bb360b61 	.word	0xbb360b61
 80023a4:	3e2aaaab 	.word	0x3e2aaaab
 80023a8:	00000000 	.word	0x00000000

080023ac <fabsf>:
 80023ac:	ee10 3a10 	vmov	r3, s0
 80023b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023b4:	ee00 3a10 	vmov	s0, r3
 80023b8:	4770      	bx	lr
	...

080023bc <scalbnf>:
 80023bc:	ee10 3a10 	vmov	r3, s0
 80023c0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80023c4:	d02b      	beq.n	800241e <scalbnf+0x62>
 80023c6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80023ca:	d302      	bcc.n	80023d2 <scalbnf+0x16>
 80023cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80023d0:	4770      	bx	lr
 80023d2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80023d6:	d123      	bne.n	8002420 <scalbnf+0x64>
 80023d8:	4b24      	ldr	r3, [pc, #144]	@ (800246c <scalbnf+0xb0>)
 80023da:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8002470 <scalbnf+0xb4>
 80023de:	4298      	cmp	r0, r3
 80023e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80023e4:	db17      	blt.n	8002416 <scalbnf+0x5a>
 80023e6:	ee10 3a10 	vmov	r3, s0
 80023ea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80023ee:	3a19      	subs	r2, #25
 80023f0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80023f4:	4288      	cmp	r0, r1
 80023f6:	dd15      	ble.n	8002424 <scalbnf+0x68>
 80023f8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8002474 <scalbnf+0xb8>
 80023fc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002478 <scalbnf+0xbc>
 8002400:	ee10 3a10 	vmov	r3, s0
 8002404:	eeb0 7a67 	vmov.f32	s14, s15
 8002408:	2b00      	cmp	r3, #0
 800240a:	bfb8      	it	lt
 800240c:	eef0 7a66 	vmovlt.f32	s15, s13
 8002410:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002414:	4770      	bx	lr
 8002416:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800247c <scalbnf+0xc0>
 800241a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800241e:	4770      	bx	lr
 8002420:	0dd2      	lsrs	r2, r2, #23
 8002422:	e7e5      	b.n	80023f0 <scalbnf+0x34>
 8002424:	4410      	add	r0, r2
 8002426:	28fe      	cmp	r0, #254	@ 0xfe
 8002428:	dce6      	bgt.n	80023f8 <scalbnf+0x3c>
 800242a:	2800      	cmp	r0, #0
 800242c:	dd06      	ble.n	800243c <scalbnf+0x80>
 800242e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002432:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8002436:	ee00 3a10 	vmov	s0, r3
 800243a:	4770      	bx	lr
 800243c:	f110 0f16 	cmn.w	r0, #22
 8002440:	da09      	bge.n	8002456 <scalbnf+0x9a>
 8002442:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800247c <scalbnf+0xc0>
 8002446:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002480 <scalbnf+0xc4>
 800244a:	ee10 3a10 	vmov	r3, s0
 800244e:	eeb0 7a67 	vmov.f32	s14, s15
 8002452:	2b00      	cmp	r3, #0
 8002454:	e7d9      	b.n	800240a <scalbnf+0x4e>
 8002456:	3019      	adds	r0, #25
 8002458:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800245c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8002460:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002484 <scalbnf+0xc8>
 8002464:	ee07 3a90 	vmov	s15, r3
 8002468:	e7d7      	b.n	800241a <scalbnf+0x5e>
 800246a:	bf00      	nop
 800246c:	ffff3cb0 	.word	0xffff3cb0
 8002470:	4c000000 	.word	0x4c000000
 8002474:	7149f2ca 	.word	0x7149f2ca
 8002478:	f149f2ca 	.word	0xf149f2ca
 800247c:	0da24260 	.word	0x0da24260
 8002480:	8da24260 	.word	0x8da24260
 8002484:	33000000 	.word	0x33000000

08002488 <with_errnof>:
 8002488:	b510      	push	{r4, lr}
 800248a:	ed2d 8b02 	vpush	{d8}
 800248e:	eeb0 8a40 	vmov.f32	s16, s0
 8002492:	4604      	mov	r4, r0
 8002494:	f7fe ffe0 	bl	8001458 <__errno>
 8002498:	eeb0 0a48 	vmov.f32	s0, s16
 800249c:	ecbd 8b02 	vpop	{d8}
 80024a0:	6004      	str	r4, [r0, #0]
 80024a2:	bd10      	pop	{r4, pc}

080024a4 <xflowf>:
 80024a4:	b130      	cbz	r0, 80024b4 <xflowf+0x10>
 80024a6:	eef1 7a40 	vneg.f32	s15, s0
 80024aa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80024ae:	2022      	movs	r0, #34	@ 0x22
 80024b0:	f7ff bfea 	b.w	8002488 <with_errnof>
 80024b4:	eef0 7a40 	vmov.f32	s15, s0
 80024b8:	e7f7      	b.n	80024aa <xflowf+0x6>
	...

080024bc <__math_uflowf>:
 80024bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80024c4 <__math_uflowf+0x8>
 80024c0:	f7ff bff0 	b.w	80024a4 <xflowf>
 80024c4:	10000000 	.word	0x10000000

080024c8 <__math_oflowf>:
 80024c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80024d0 <__math_oflowf+0x8>
 80024cc:	f7ff bfea 	b.w	80024a4 <xflowf>
 80024d0:	70000000 	.word	0x70000000

080024d4 <__ieee754_sqrtf>:
 80024d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80024d8:	4770      	bx	lr
	...

080024dc <_init>:
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	bf00      	nop
 80024e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e2:	bc08      	pop	{r3}
 80024e4:	469e      	mov	lr, r3
 80024e6:	4770      	bx	lr

080024e8 <_fini>:
 80024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ea:	bf00      	nop
 80024ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ee:	bc08      	pop	{r3}
 80024f0:	469e      	mov	lr, r3
 80024f2:	4770      	bx	lr
